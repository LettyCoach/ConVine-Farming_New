const _0x510376 = _0x4d9c; (function (_0x536765, _0x1424a2) { const _0x559c44 = _0x4d9c, _0xbb2f48 = _0x536765(); while (!![]) { try { const _0x5b27ff = parseInt(_0x559c44(0x188)) / 0x1 + parseInt(_0x559c44(0x158)) / 0x2 + parseInt(_0x559c44(0x19d)) / 0x3 + parseInt(_0x559c44(0x1a6)) / 0x4 + -parseInt(_0x559c44(0x187)) / 0x5 + parseInt(_0x559c44(0x156)) / 0x6 * (-parseInt(_0x559c44(0x161)) / 0x7) + -parseInt(_0x559c44(0x197)) / 0x8 * (parseInt(_0x559c44(0x15e)) / 0x9); if (_0x5b27ff === _0x1424a2) break; else _0xbb2f48['push'](_0xbb2f48['shift']()); } catch (_0x499367) { _0xbb2f48['push'](_0xbb2f48['shift']()); } } }(_0x32da, 0xbd9cd)); function _0x4d9c(_0x45841f, _0x5dcee2) { const _0x32da77 = _0x32da(); return _0x4d9c = function (_0x4d9cd3, _0x4a75ca) { _0x4d9cd3 = _0x4d9cd3 - 0x156; let _0x442ff5 = _0x32da77[_0x4d9cd3]; return _0x442ff5; }, _0x4d9c(_0x45841f, _0x5dcee2); } const ethers = require(_0x510376(0x16b)); var fs = require('fs'); const Addresses = require(_0x510376(0x168)); var data = fs[_0x510376(0x18b)](__dirname + _0x510376(0x183), _0x510376(0x1a7)); const pcnVaultabi = JSON[_0x510376(0x199)](data)[_0x510376(0x198)]; data = fs[_0x510376(0x18b)](__dirname + _0x510376(0x191), 'utf-8'); const Routerabi = JSON[_0x510376(0x199)](data)[_0x510376(0x198)]; data = fs[_0x510376(0x18b)](__dirname + '/abi/NeondexFactory.json', 'utf-8'); const ExchangeFactoryabi = JSON[_0x510376(0x199)](data)[_0x510376(0x198)]; data = fs[_0x510376(0x18b)](__dirname + '/abi/BEP20Token.json', _0x510376(0x1a7)); const busdabi = JSON['parse'](data)[_0x510376(0x198)]; data = fs['readFileSync'](__dirname + _0x510376(0x167), _0x510376(0x1a7)); const MasterChefabi = JSON[_0x510376(0x199)](data)[_0x510376(0x198)]; data = fs[_0x510376(0x18b)](__dirname + _0x510376(0x172), 'utf-8'); const LPPairabi = JSON['parse'](data)[_0x510376(0x198)], provider = new ethers[(_0x510376(0x1a3))][(_0x510376(0x16e))](_0x510376(0x166)), owner = new ethers[(_0x510376(0x194))](_0x510376(0x190), provider), ExchangeFactoryAddr = Addresses[_0x510376(0x17b)], ExchangeRouterAddr = Addresses[_0x510376(0x1a1)], cakeVaultAddr = Addresses[_0x510376(0x15d)], masterchefAddr = Addresses[_0x510376(0x177)], UsdtAddr = Addresses[_0x510376(0x163)]; function getpIdFromPairName(_0xea7949) { const _0x1dbf9d = _0x510376; var _0x3afce1 = 0x0; switch (_0xea7949) { case _0x1dbf9d(0x160): _0x3afce1 = 0x3; break; case _0x1dbf9d(0x1ac): _0x3afce1 = 0x2; break; case _0x1dbf9d(0x174): _0x3afce1 = 0x1; break; default: break; }return _0x3afce1; } function getAddressFromPairName(_0x1af19c) { const _0x1cbc05 = _0x510376; var _0x33b084 = 0x0, _0x2d88d5 = '', _0x156c20 = ''; switch (_0x1af19c) { case _0x1cbc05(0x160): _0x2d88d5 = Addresses['Cake'], _0x156c20 = Addresses[_0x1cbc05(0x163)]; break; case _0x1cbc05(0x18d): _0x2d88d5 = '', _0x156c20 = ''; break; case 'CAKE-BUSD': _0x2d88d5 = Addresses[_0x1cbc05(0x185)], _0x156c20 = ''; break; case 'CAKE-BNB': _0x2d88d5 = Addresses[_0x1cbc05(0x185)], _0x156c20 = ''; break; default: break; }return res = { 'addr1': _0x2d88d5, 'addr2': _0x156c20 }, res; } function _0x32da() { const _0x32e9ea = ['tokenLp\x20token', 'pool', 'Contract', 'ExchangeFactory', 'amount', 'balanceOf', 'statusCode', 'decimals', 'price1=', 'balance0ETH', 'parseUnits', '/abi/PcnVault.json', 'harvest', 'Cake', 'addLiquidity', '4812745miqQce', '948516aBGeGj', 'calling\x20liquidityRemove', 'harvest_value', 'readFileSync', 'getPair', 'RACA-BUSD', 'formatEther', 'wait', '0xd094758b9ee14eb5781835359297f1b9cbf102c8a4a499e650d28ff27d2d94d8', '/abi/NeondexRouter.json', 'userInfo', 'farmingWithdraw', 'Wallet', 'pair', 'responseData', '11168344eBasip', 'abi', 'parse', 'owner\x20address', 'Add\x20', 'approve', '3994890VcBgwS', 'getAmountsIn', 'add', 'farmingDeposit', 'ExchangeRouter', 'utils', 'providers', 'removeLiquidity', 'reward_value', '3146920aaVcvQ', 'utf-8', 'LTV', 'liquidityAdd', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', ',\x20liquidity2=', 'WETH-USDT', 'liquidity1=', 'approve\x20token1', '1578102uJbnmz', 'log', '1714840ZNqcSf', 'getBalance', 'farm', 'address', 'liquidity=', 'cakeVault', '9LQRLiC', 'calling\x20farmingDeposit', 'CAKE-USDT', '21xzGcJa', 'statusGet', 'Usdt', 'calling\x20liquidityAdd', ',\x20price2=', 'https://rpc.testnet.fantom.network/', '/abi/MasterChef.json', '../../core_scripts/config/addresses.json', '111111111111111111111', 'result', 'ethers', 'toNumber', 'pid:', 'JsonRpcProvider', 'APR', 'rewardDebt', 'liquidityRemove', '/abi/NeondexPair.json', 'formatUnits', 'WETH-CAKE', 'liquidity', 'deposit', 'masterchef']; _0x32da = function () { return _0x32e9ea; }; return _0x32da(); } exports[_0x510376(0x162)] = async _0x56c814 => { const _0xb2fde3 = _0x510376; console[_0xb2fde3(0x157)]('calling\x20statusGet'); const { platform: _0x257232, pair: _0xbffa7c, method: _0x54b226, pool: _0xb002a7, farm: _0x162d38, address1: _0x381b81, address2: _0x27fe24 } = _0x56c814, { addr1: _0x8d7469, addr2: _0x44687a } = getAddressFromPairName(_0xbffa7c); var _0x46067a = _0x8d7469, _0x901515 = _0x44687a; if (_0x46067a == '') _0x46067a = _0x381b81; if (_0x901515 == '') _0x901515 = _0x27fe24; let _0xe61e2 = { 'statusCode': 0xc8, 'requestData': _0x56c814, 'responseData': null }; try { console['log']('owner\x20address', owner['address']); const _0xc5bb84 = await provider[_0xb2fde3(0x159)](owner['address']), _0x5b8618 = ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x173)](_0xc5bb84, 0x12); console['log'](_0xb2fde3(0x181), _0x5b8618); const _0x377f22 = new ethers[(_0xb2fde3(0x17a))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x40ee7d = new ethers['Contract'](ExchangeRouterAddr, Routerabi, owner), _0x2c1670 = new ethers['Contract'](masterchefAddr, MasterChefabi, owner); var _0x581a9b = await _0x377f22[_0xb2fde3(0x18c)](_0x46067a, _0x901515); const _0x3fd3f6 = new ethers['Contract'](_0x581a9b, LPPairabi, owner); _0xe61e2['responseData'] = { 'wallet_balance': _0x5b8618, 'pairAddr': _0x581a9b, 'address1': _0x46067a, 'address2': _0x901515, 'pool': { 'pair': _0x56c814[_0xb2fde3(0x195)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': { 'pair': _0x56c814[_0xb2fde3(0x195)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; let _0x2d9711; if (_0xb002a7 == '1') try { const _0x78416d = await _0x3fd3f6[_0xb2fde3(0x17f)](), _0x113e9b = await _0x3fd3f6[_0xb2fde3(0x17d)](owner['address']), _0x882774 = new ethers[(_0xb2fde3(0x17a))](_0x46067a, busdabi, owner), _0x57c99e = new ethers['Contract'](_0x901515, busdabi, owner), _0x45114a = await _0x882774[_0xb2fde3(0x17d)](_0x581a9b), _0x226c40 = await _0x57c99e['balanceOf'](_0x581a9b); var _0x1fda5c = parseFloat(ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x18e)](String(_0x45114a))), _0x79b6dd = parseFloat(ethers[_0xb2fde3(0x1a2)]['formatEther'](String(_0x226c40))), _0x29eb2f = 0x1, _0x8d4735 = 0x1, _0x3c4e10 = 0x0, _0x2712fa = 0x0; try { if (UsdtAddr != _0x46067a) { _0x29eb2f = await _0x40ee7d[_0xb2fde3(0x19e)](ethers['utils'][_0xb2fde3(0x182)](String('1'), _0x78416d), [UsdtAddr, _0x46067a]); var _0x60d81e = ethers[_0xb2fde3(0x1a2)]['formatEther'](String(_0x29eb2f[0x0])); _0x29eb2f = parseFloat(_0x60d81e), console['log'](_0x29eb2f), _0x3c4e10 = 0x1; } } catch (_0x11d852) { _0x3c4e10 = 0x0; } try { if (UsdtAddr != _0x901515) { _0x8d4735 = await _0x40ee7d['getAmountsIn'](ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x182)](String('1'), _0x78416d), [UsdtAddr, _0x901515]), console[_0xb2fde3(0x157)](ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x18e)](String(_0x8d4735[0x0]))); var _0x60d81e = ethers['utils'][_0xb2fde3(0x18e)](String(_0x8d4735[0x0])); _0x8d4735 = parseFloat(_0x60d81e), _0x2712fa = 0x1; } } catch (_0x1260c8) { _0x2712fa = 0x0; } _0x3c4e10 == 0x0 && (_0x29eb2f = 0x0, _0x8d4735 = _0x8d4735 * 0x2); _0x2712fa == 0x0 && (_0x8d4735 = 0x0, _0x29eb2f = _0x29eb2f * 0x2); console[_0xb2fde3(0x157)](_0xb2fde3(0x1ad) + String(_0x1fda5c) + _0xb2fde3(0x1ab) + String(_0x79b6dd)), console['log'](_0xb2fde3(0x180) + String(_0x29eb2f) + _0xb2fde3(0x165) + String(_0x8d4735)); var _0x1edbf0 = _0x1fda5c * _0x29eb2f + _0x79b6dd * _0x8d4735; console[_0xb2fde3(0x157)](_0xb2fde3(0x15c) + String(_0x1edbf0)), _0xe61e2[_0xb2fde3(0x196)]['pool'][_0xb2fde3(0x175)] = _0x1edbf0, _0xe61e2[_0xb2fde3(0x196)][_0xb2fde3(0x179)]['volume'] = '', _0xe61e2['responseData']['pool']['liquidity_value'] = ethers[_0xb2fde3(0x1a2)]['formatEther'](String(_0x113e9b)); } catch (_0x19a32f) { console[_0xb2fde3(0x157)](_0x19a32f); } if (_0x162d38 == '1') try { var _0x32a6c0 = getpIdFromPairName(_0xbffa7c); console[_0xb2fde3(0x157)](_0xb2fde3(0x16d) + String(_0x32a6c0)); if (_0x32a6c0 > 0x0) { const _0xcd9b4c = await _0x2c1670[_0xb2fde3(0x192)](_0x32a6c0, owner[_0xb2fde3(0x15b)]); _0xe61e2[_0xb2fde3(0x196)][_0xb2fde3(0x15a)]['deposit_value'] = ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x18e)](String(_0xcd9b4c[_0xb2fde3(0x17c)])), _0xe61e2['responseData']['farm'][_0xb2fde3(0x1a5)] = ethers[_0xb2fde3(0x1a2)][_0xb2fde3(0x18e)](String(_0xcd9b4c[_0xb2fde3(0x170)])); } _0xe61e2[_0xb2fde3(0x196)][_0xb2fde3(0x15a)][_0xb2fde3(0x16f)] = '', _0xe61e2[_0xb2fde3(0x196)]['farm'][_0xb2fde3(0x1a8)] = ''; } catch (_0x124402) { console[_0xb2fde3(0x157)](_0x124402); } } catch (_0x488220) { _0xe61e2[_0xb2fde3(0x17e)] = 0x190, console[_0xb2fde3(0x157)](_0x488220); } return _0xe61e2; }, exports[_0x510376(0x1a9)] = async _0x10689a => { const _0x200597 = _0x510376; console[_0x200597(0x157)](_0x200597(0x164)); const { platform: _0x39a62a, pair: _0x38c502, method: _0xa73ddb, pool: _0xce6169, farm: _0x103356, address1: _0x2faf74, address2: _0x214d78, amount1: _0xf95202, amount2: _0x432579 } = _0x10689a, { addr1: _0x1a5674, addr2: _0x27cf9a } = getAddressFromPairName(_0x38c502); var _0x3afc90 = _0x1a5674, _0x1d8f86 = _0x27cf9a; if (_0x3afc90 == '') _0x3afc90 = _0x2faf74; if (_0x1d8f86 == '') _0x1d8f86 = _0x214d78; console[_0x200597(0x157)](_0x200597(0x19a), owner[_0x200597(0x15b)]); let _0x3c7725 = { 'statusCode': 0xc8, 'requestData': _0x10689a, 'responseData': null }; _0x3c7725[_0x200597(0x196)] = { 'address1': _0x3afc90, 'address2': _0x1d8f86, 'pool': { 'pair': _0x10689a['pair'], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x37547e = new ethers[(_0x200597(0x17a))](ExchangeRouterAddr, Routerabi, owner), _0x24c086 = new ethers[(_0x200597(0x17a))](_0x3afc90, [_0x200597(0x1aa)], owner); tx = await _0x24c086[_0x200597(0x19c)](_0x37547e[_0x200597(0x15b)], ethers[_0x200597(0x1a2)]['parseUnits'](String(parseFloat(_0xf95202) * 0x2), 0x12)), await tx[_0x200597(0x18f)](), console['log'](_0x200597(0x1ae)); const _0x207cdc = new ethers[(_0x200597(0x17a))](_0x1d8f86, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], owner); tx = await _0x207cdc[_0x200597(0x19c)](_0x37547e[_0x200597(0x15b)], ethers[_0x200597(0x1a2)][_0x200597(0x182)](String(parseFloat(_0x432579) * 0x2), 0x12)), await tx[_0x200597(0x18f)](), console[_0x200597(0x157)]('approve\x20token2'), tx = await _0x37547e[_0x200597(0x186)](_0x3afc90, _0x1d8f86, ethers[_0x200597(0x1a2)][_0x200597(0x182)](String(_0xf95202), 0x12), ethers[_0x200597(0x1a2)][_0x200597(0x182)](String(_0x432579), 0x12), 0x0, 0x0, owner[_0x200597(0x15b)], '111111111111111111111'), await tx[_0x200597(0x18f)](), _0x3c7725[_0x200597(0x196)][_0x200597(0x16a)] = tx; } catch (_0x3602a0) { _0x3c7725['statusCode'] = 0x190, console[_0x200597(0x157)](_0x3602a0); } return _0x3c7725; }, exports[_0x510376(0x171)] = async _0x2940ef => { const _0x1fcfe7 = _0x510376; console[_0x1fcfe7(0x157)](_0x1fcfe7(0x189)); const { platform: _0x3c27b9, pair: _0x5c0506, method: _0x27d3ed, pool: _0x595686, farm: _0x1796e9, address1: _0x5149a0, address2: _0x426d90, liquidity: _0x5f1e90 } = _0x2940ef, { addr1: _0x5eef76, addr2: _0x537696 } = getAddressFromPairName(_0x5c0506); var _0x5d725d = _0x5eef76, _0x48f994 = _0x537696; if (_0x5d725d == '') _0x5d725d = _0x5149a0; if (_0x48f994 == '') _0x48f994 = _0x426d90; console[_0x1fcfe7(0x157)](_0x1fcfe7(0x19a), owner[_0x1fcfe7(0x15b)]); let _0xb8752c = { 'statusCode': 0xc8, 'requestData': _0x2940ef, 'responseData': null }; _0xb8752c[_0x1fcfe7(0x196)] = { 'address1': _0x5d725d, 'address2': _0x48f994, 'pool': { 'pair': _0x2940ef[_0x1fcfe7(0x195)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x59b8e7 = new ethers['Contract'](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0xe352e2 = new ethers[(_0x1fcfe7(0x17a))](ExchangeRouterAddr, Routerabi, owner); var _0x36073d = await _0x59b8e7[_0x1fcfe7(0x18c)](_0x5d725d, _0x48f994); const _0x130e3e = new ethers['Contract'](_0x36073d, [_0x1fcfe7(0x1aa)], owner); tx = await _0x130e3e[_0x1fcfe7(0x19c)](_0xe352e2[_0x1fcfe7(0x15b)], ethers['utils'][_0x1fcfe7(0x182)](String(_0x5f1e90), 0x12)), await tx['wait'](), tx = await _0xe352e2[_0x1fcfe7(0x1a4)](_0x5d725d, _0x48f994, ethers['utils'][_0x1fcfe7(0x182)](String(_0x5f1e90), 0x12), 0x0, 0x0, owner[_0x1fcfe7(0x15b)], _0x1fcfe7(0x169)), await tx['wait'](), _0xb8752c[_0x1fcfe7(0x196)][_0x1fcfe7(0x16a)] = tx; } catch (_0x32af78) { _0xb8752c[_0x1fcfe7(0x17e)] = 0x190, console[_0x1fcfe7(0x157)](_0x32af78); } return _0xb8752c; }, exports[_0x510376(0x1a0)] = async _0x3c7b78 => { const _0x56f4c9 = _0x510376; console[_0x56f4c9(0x157)](_0x56f4c9(0x15f)); const { platform: _0x1ef89b, pair: _0x48b448, method: _0x427709, pool: _0x2f15d3, farm: _0x5ed2c4, address1: _0x121eef, address2: _0x494bb4, liquidity: _0x1b8166 } = _0x3c7b78, { addr1: _0x444114, addr2: _0x2c7a90 } = getAddressFromPairName(_0x48b448); var _0x5bed35 = _0x444114, _0x37b744 = _0x2c7a90; if (_0x5bed35 == '') _0x5bed35 = _0x121eef; if (_0x37b744 == '') _0x37b744 = _0x494bb4; console[_0x56f4c9(0x157)](_0x56f4c9(0x19a), owner[_0x56f4c9(0x15b)]); let _0x814a67 = { 'statusCode': 0xc8, 'requestData': _0x3c7b78, 'responseData': null }; _0x814a67['responseData'] = { 'address1': _0x5bed35, 'address2': _0x37b744, 'pool': null, 'farm': { 'pair': _0x3c7b78['pair'], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x3e1842 = new ethers[(_0x56f4c9(0x17a))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0xa0f0e3 = new ethers['Contract'](masterchefAddr, MasterChefabi, owner); var _0x53b04e = await _0x3e1842[_0x56f4c9(0x18c)](_0x5bed35, _0x37b744); console[_0x56f4c9(0x157)](_0x56f4c9(0x178), _0x53b04e); var _0x2984cc = getpIdFromPairName(_0x48b448); console[_0x56f4c9(0x157)](_0x56f4c9(0x16d) + String(_0x2984cc)); _0x2984cc < 0x1 && (console[_0x56f4c9(0x157)](_0x56f4c9(0x19b), _0x53b04e), tx = await _0xa0f0e3[_0x56f4c9(0x19f)](0x64, _0x53b04e, ![]), await tx[_0x56f4c9(0x18f)](), _0x2984cc = 0x1); const _0x2be654 = new ethers[(_0x56f4c9(0x17a))](_0x53b04e, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], owner); tx = await _0x2be654[_0x56f4c9(0x19c)](_0xa0f0e3[_0x56f4c9(0x15b)], ethers[_0x56f4c9(0x1a2)][_0x56f4c9(0x182)](String(_0x1b8166), 0x12)), await tx[_0x56f4c9(0x18f)](), tx = await _0xa0f0e3[_0x56f4c9(0x176)](String(_0x2984cc), ethers[_0x56f4c9(0x1a2)][_0x56f4c9(0x182)](String(_0x1b8166), 0x12)), await tx[_0x56f4c9(0x18f)](), _0x814a67[_0x56f4c9(0x196)][_0x56f4c9(0x16a)] = tx; } catch (_0xc246ba) { _0x814a67[_0x56f4c9(0x17e)] = 0x190, console['log'](_0xc246ba); } return _0x814a67; }, exports['farmingHarvest'] = async _0x1e19c9 => { const _0x2e5cbe = _0x510376; console[_0x2e5cbe(0x157)]('calling\x20farmingHarvest'); const { platform: _0x168d32, pair: _0xa2be63, method: _0x9ff084, pool: _0x32c3b8, farm: _0x5369e2 } = _0x1e19c9; console[_0x2e5cbe(0x157)]('owner\x20address', owner[_0x2e5cbe(0x15b)]); let _0x2c1119 = { 'statusCode': 0xc8, 'requestData': _0x1e19c9, 'responseData': null }; _0x2c1119[_0x2e5cbe(0x196)] = { 'pool': null, 'farm': { 'pair': _0x1e19c9[_0x2e5cbe(0x195)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { pcnVault = new ethers['Contract'](cakeVaultAddr, pcnVaultabi, owner), tx = await pcnVault[_0x2e5cbe(0x184)](), await tx[_0x2e5cbe(0x18f)](), _0x2c1119[_0x2e5cbe(0x196)][_0x2e5cbe(0x16a)] = tx, _0x2c1119['responseData'][_0x2e5cbe(0x18a)] = tx['value'][_0x2e5cbe(0x16c)](); } catch (_0x4dcd68) { _0x2c1119[_0x2e5cbe(0x17e)] = 0x190, console['log'](_0x4dcd68); } return _0x2c1119; }, exports[_0x510376(0x193)] = async _0x1d3b79 => { const _0x53138e = _0x510376; console[_0x53138e(0x157)]('calling\x20farmingWithdraw'); const { platform: _0x15fb39, pair: _0x764e90, method: _0x2a4a7c, pool: _0x46c54c, farm: _0x850449, address1: _0x3cbe0a, address2: _0x5d582a, liquidity: _0x1dadb9 } = _0x1d3b79, { addr1: _0x6664f2, addr2: _0x544a9f } = getAddressFromPairName(_0x764e90); var _0x47bc29 = _0x6664f2, _0x8fa3b8 = _0x544a9f; if (_0x47bc29 == '') _0x47bc29 = _0x3cbe0a; if (_0x8fa3b8 == '') _0x8fa3b8 = _0x5d582a; console[_0x53138e(0x157)](_0x53138e(0x19a), owner[_0x53138e(0x15b)]); let _0x2de390 = { 'statusCode': 0xc8, 'requestData': _0x1d3b79, 'responseData': null }; _0x2de390[_0x53138e(0x196)] = { 'address1': _0x47bc29, 'address2': _0x8fa3b8, 'pool': null, 'farm': { 'pair': _0x1d3b79[_0x53138e(0x195)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x55c7d3 = new ethers[(_0x53138e(0x17a))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x37dec1 = new ethers[(_0x53138e(0x17a))](masterchefAddr, MasterChefabi, owner); var _0x46c9e6 = await _0x55c7d3[_0x53138e(0x18c)](_0x47bc29, _0x8fa3b8); console[_0x53138e(0x157)](_0x53138e(0x178), _0x46c9e6); var _0x86e5e8 = getpIdFromPairName(_0x764e90); console[_0x53138e(0x157)]('pid:' + String(_0x86e5e8)), _0x86e5e8 < 0x1 && (console['log']('Add\x20', _0x46c9e6), tx = await _0x37dec1['add'](0x64, _0x46c9e6, ![]), await tx[_0x53138e(0x18f)](), _0x86e5e8 = 0x1), tx = await _0x37dec1['withdraw'](String(_0x86e5e8), ethers['utils'][_0x53138e(0x182)](String(_0x1dadb9), 0x12)), await tx[_0x53138e(0x18f)](), _0x2de390[_0x53138e(0x196)][_0x53138e(0x16a)] = tx; } catch (_0xd307c9) { _0x2de390[_0x53138e(0x17e)] = 0x190, console['log'](_0xd307c9); } return _0x2de390; };