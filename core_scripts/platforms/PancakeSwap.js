const _0x34fb26 = _0x39a6; (function (_0x29a032, _0x1a73c8) { const _0x53df6b = _0x39a6, _0xc66b41 = _0x29a032(); while (!![]) { try { const _0x2ed6f4 = -parseInt(_0x53df6b(0xb8)) / 0x1 + -parseInt(_0x53df6b(0xae)) / 0x2 + parseInt(_0x53df6b(0xfd)) / 0x3 * (-parseInt(_0x53df6b(0xc7)) / 0x4) + parseInt(_0x53df6b(0xce)) / 0x5 + -parseInt(_0x53df6b(0xd4)) / 0x6 * (parseInt(_0x53df6b(0xf7)) / 0x7) + parseInt(_0x53df6b(0xd8)) / 0x8 * (-parseInt(_0x53df6b(0xd0)) / 0x9) + parseInt(_0x53df6b(0xb3)) / 0xa * (parseInt(_0x53df6b(0xd5)) / 0xb); if (_0x2ed6f4 === _0x1a73c8) break; else _0xc66b41['push'](_0xc66b41['shift']()); } catch (_0x4fc571) { _0xc66b41['push'](_0xc66b41['shift']()); } } }(_0x47b5, 0xd1105)); const ethers = require(_0x34fb26(0xb1)), pcnVaultabi = require(_0x34fb26(0xac))[_0x34fb26(0xd6)], Routerabi = require(_0x34fb26(0x9c))[_0x34fb26(0xd6)], ExchangeFactoryabi = require(_0x34fb26(0xa2))[_0x34fb26(0xd6)], busdabi = require(_0x34fb26(0xa6))[_0x34fb26(0xd6)], MasterChefabi = require(_0x34fb26(0xdd))[_0x34fb26(0xd6)], LPPairabi = require('../../artifacts/contracts/exchange-protocol/dexfactory.sol/NeondexPair.json')[_0x34fb26(0xd6)], Addresses = require('../config/addresses.json'), provider = new ethers[(_0x34fb26(0xf9))]['JsonRpcProvider'](process[_0x34fb26(0xf5)][_0x34fb26(0xe5)]); function _0x39a6(_0x55e851, _0xf4acd5) { const _0x47b544 = _0x47b5(); return _0x39a6 = function (_0x39a623, _0x2b2bd7) { _0x39a623 = _0x39a623 - 0x9c; let _0xd9be15 = _0x47b544[_0x39a623]; return _0xd9be15; }, _0x39a6(_0x55e851, _0xf4acd5); } let private_key = process[_0x34fb26(0xf5)][_0x34fb26(0xdb)]; const owner = new ethers[(_0x34fb26(0xd1))](private_key, provider), ExchangeFactoryAddr = Addresses[_0x34fb26(0xcb)], ExchangeRouterAddr = Addresses[_0x34fb26(0xf2)], cakeVaultAddr = Addresses[_0x34fb26(0xbb)], masterchefAddr = Addresses[_0x34fb26(0xcd)], UsdtAddr = Addresses['PancakeSwapUsdt']; function _0x47b5() { const _0x19f8b1 = ['tokenLp\x20token', '1344752imemFc', 'amount', 'value', 'PRIVATEKEY', 'removeLiquidity', '../../artifacts/contracts/masterchef/MasterChef.sol/MasterChef.json', 'farm', 'approve\x20token2', 'calling\x20farmingHarvest', 'statusGet', 'log', 'LPTokens', 'volume', 'BscRpcUrl', 'farmingDeposit', 'lpToken', 'decimals', 'statusCode', 'responseData', 'getAmountsIn', 'calling\x20farmingDeposit', 'Add\x20', 'harvest', 'farmingHarvest', 'error_reason', 'Contract', 'PancakeSwapExchangeRouter', 'pid:', '111111111111111111111', 'env', 'approve', '7vFHmls', 'CAKE-BNB', 'providers', 'toNumber', 'farmingWithdraw', 'PancakeSwapUsdt', '1827549AWnhMn', ',\x20price2=', 'result', 'price1=', 'owner\x20address', '../../artifacts/contracts/exchange-protocol/dexRouter.sol/NeondexRouter.json', 'APR', 'poolInfo', 'getPair', 'pool', 'add', '../../artifacts/contracts/exchange-protocol/dexfactory.sol/NeondexFactory.json', 'USDT-CAKE', 'CAKE-BUSD', 'liquidityRemove', '../../artifacts/contracts/tokens/busd.sol/BEP20Token.json', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', 'withdraw', 'reward_value', 'CAKE-USDT', 'pair', '../../artifacts/contracts/cakevault/pcnVault.sol/pcnVault.json', 'BUSD-CAKE', '1585720djuNFW', ',liquidity_value\x20=', 'liquidityAdd', 'ethers', 'deposit', '5830HgosZp', 'calling\x20farmingWithdraw', 'parseUnits', 'liquidity=', 'PancakeSwapBUSD', '999855RfOXEZ', 'PancakeSwapWBNB', 'utils', 'PancakeSwapcakeVault', 'harvest_value', 'rewardDebt', 'RACA-BUSD', 'getBalance', 'calling\x20liquidityRemove', 'formatEther', 'wait', 'LTV', 'reason', 'BUSD-RACA', 'calling\x20statusGet', '4lrowGh', 'approve\x20token1', 'address', 'liquidity_value', 'PancakeSwapExchangeFactory', 'PancakeSwapCake', 'PancakeSwapmasterchef', '5622620olfCuj', 'PancakeSwapRACA', '63yuwrkW', 'Wallet', 'userInfo', 'BNB-CAKE', '5792190lVtmoa', '80674wPaqaS', 'abi']; _0x47b5 = function () { return _0x19f8b1; }; return _0x47b5(); } function getpIdFromPairName(_0x15de2a) { const _0x23f40a = _0x34fb26; var _0x1cf20a = 0x0; switch (_0x15de2a) { case _0x23f40a(0xaa): case _0x23f40a(0xa3): _0x1cf20a = 0x1a6; break; case _0x23f40a(0xbe): case _0x23f40a(0xc5): _0x1cf20a = 0x1fb; break; case 'CAKE-BUSD': case _0x23f40a(0xad): _0x1cf20a = 0x185; break; case _0x23f40a(0xf8): case _0x23f40a(0xd3): _0x1cf20a = 0xfb; break; default: break; }return _0x1cf20a; } function getAddressFromPairName(_0xd3af56) { const _0x5bd9cd = _0x34fb26; var _0x37b109 = 0x0, _0x589eaa = '', _0x42d446 = ''; switch (_0xd3af56) { case _0x5bd9cd(0xaa): _0x589eaa = Addresses[_0x5bd9cd(0xcc)], _0x42d446 = Addresses[_0x5bd9cd(0xfc)]; break; case _0x5bd9cd(0xa3): _0x42d446 = Addresses[_0x5bd9cd(0xcc)], _0x589eaa = Addresses[_0x5bd9cd(0xfc)]; break; case _0x5bd9cd(0xbe): _0x589eaa = Addresses[_0x5bd9cd(0xcf)], _0x42d446 = Addresses[_0x5bd9cd(0xb7)]; break; case _0x5bd9cd(0xc5): _0x42d446 = Addresses['PancakeSwapRACA'], _0x589eaa = Addresses[_0x5bd9cd(0xb7)]; break; case _0x5bd9cd(0xa4): _0x589eaa = Addresses[_0x5bd9cd(0xcc)], _0x42d446 = Addresses[_0x5bd9cd(0xb7)]; break; case 'BUSD-CAKE': _0x42d446 = Addresses['PancakeSwapCake'], _0x589eaa = Addresses[_0x5bd9cd(0xb7)]; break; case _0x5bd9cd(0xf8): _0x589eaa = Addresses['PancakeSwapCake'], _0x42d446 = Addresses[_0x5bd9cd(0xb9)]; break; case _0x5bd9cd(0xd3): _0x42d446 = Addresses['PancakeSwapCake'], _0x589eaa = Addresses[_0x5bd9cd(0xb9)]; break; default: break; }return res = { 'addr1': _0x589eaa, 'addr2': _0x42d446 }, res; } async function findPid(_0x35c8b7, _0x1b5e06, _0x1ef442) { const _0x3c98dd = _0x34fb26; console['log'](_0x3c98dd(0xd7), _0x1ef442); var _0x1ffd81 = 0x0; try { while (0x1) { _0x1ffd81++; const _0x149b8b = await _0x1b5e06[_0x3c98dd(0x9e)](String(_0x1ffd81)); _0x149b8b[_0x3c98dd(0xe7)] == _0x1ef442 && console[_0x3c98dd(0xe2)]('pid:' + String(_0x1ffd81)); } } catch (_0x4bd2e0) { } } exports[_0x34fb26(0xe1)] = async _0x463f8c => { const _0x3d54e0 = _0x34fb26; console[_0x3d54e0(0xe2)](_0x3d54e0(0xc6)); const { platform: _0x48eadc, pair: _0x2161e4, method: _0x7c5e2a, pool: _0x528084, farm: _0x1d4fd8, address1: _0x17b664, address2: _0x3d3758 } = _0x463f8c, { addr1: _0x27f984, addr2: _0x459845 } = getAddressFromPairName(_0x2161e4); var _0xe2be6e = _0x27f984, _0x54b21e = _0x459845; if (_0xe2be6e == '') _0xe2be6e = _0x17b664; if (_0x54b21e == '') _0x54b21e = _0x3d3758; let _0x493a7b = { 'statusCode': 0xc8, 'requestData': _0x463f8c, 'responseData': null }; try { console[_0x3d54e0(0xe2)](_0x3d54e0(0x101), owner[_0x3d54e0(0xc9)]); const _0x3e1aea = await provider[_0x3d54e0(0xbf)](owner['address']), _0x3c17ea = ethers[_0x3d54e0(0xba)]['formatUnits'](_0x3e1aea, 0x12); console[_0x3d54e0(0xe2)]('balance0ETH', _0x3c17ea); const _0x17ce17 = new ethers[(_0x3d54e0(0xf1))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x5236ad = new ethers[(_0x3d54e0(0xf1))](ExchangeRouterAddr, Routerabi, owner), _0xd062ee = new ethers[(_0x3d54e0(0xf1))](masterchefAddr, MasterChefabi, owner); var _0x584382 = await _0x17ce17[_0x3d54e0(0x9f)](_0xe2be6e, _0x54b21e); const _0x576be5 = new ethers[(_0x3d54e0(0xf1))](_0x584382, LPPairabi, owner); _0x493a7b[_0x3d54e0(0xea)] = { 'wallet_balance': _0x3c17ea, 'pairAddr': _0x584382, 'address1': _0xe2be6e, 'address2': _0x54b21e, 'pool': { 'pair': _0x463f8c[_0x3d54e0(0xab)], 'liquidity': '', 'volume': '', 'liquidity_value': '', 'LPTokens': '' }, 'farm': { 'pair': _0x463f8c['pair'], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; let _0x176088; if (_0x528084 == '1') try { const _0x256a5e = await _0x576be5[_0x3d54e0(0xe8)](), _0x1f22d2 = await _0x576be5['balanceOf'](owner[_0x3d54e0(0xc9)]), _0x513eae = new ethers[(_0x3d54e0(0xf1))](_0xe2be6e, busdabi, owner), _0x2049e9 = new ethers[(_0x3d54e0(0xf1))](_0x54b21e, busdabi, owner), _0x27783c = await _0x513eae['balanceOf'](_0x584382), _0xa63c75 = await _0x2049e9['balanceOf'](_0x584382), _0x179c4c = await _0x513eae['balanceOf'](owner[_0x3d54e0(0xc9)]), _0x7d2f21 = await _0x2049e9['balanceOf'](owner['address']); var _0x2653bb = parseFloat(ethers[_0x3d54e0(0xba)][_0x3d54e0(0xc1)](String(_0x27783c))), _0x3296d1 = parseFloat(ethers['utils'][_0x3d54e0(0xc1)](String(_0xa63c75))), _0x32d0c9 = parseFloat(ethers[_0x3d54e0(0xba)][_0x3d54e0(0xc1)](String(_0x179c4c))), _0x41f845 = parseFloat(ethers[_0x3d54e0(0xba)]['formatEther'](String(_0x7d2f21))), _0x5f1038 = 0x1, _0x12197d = 0x1, _0x3c2705 = 0x0, _0x5a7205 = 0x0; try { if (UsdtAddr != _0xe2be6e) { _0x5f1038 = await _0x5236ad[_0x3d54e0(0xeb)](ethers[_0x3d54e0(0xba)][_0x3d54e0(0xb5)](String('1'), _0x256a5e), [UsdtAddr, _0xe2be6e]); var _0xb41ed2 = ethers[_0x3d54e0(0xba)]['formatEther'](String(_0x5f1038[0x0])); _0x5f1038 = parseFloat(_0xb41ed2), console[_0x3d54e0(0xe2)](_0x5f1038), _0x3c2705 = 0x1; } } catch (_0x1d9266) { _0x3c2705 = 0x0; } try { if (UsdtAddr != _0x54b21e) { _0x12197d = await _0x5236ad[_0x3d54e0(0xeb)](ethers[_0x3d54e0(0xba)][_0x3d54e0(0xb5)](String('1'), _0x256a5e), [UsdtAddr, _0x54b21e]), console[_0x3d54e0(0xe2)](ethers['utils'][_0x3d54e0(0xc1)](String(_0x12197d[0x0]))); var _0xb41ed2 = ethers[_0x3d54e0(0xba)][_0x3d54e0(0xc1)](String(_0x12197d[0x0])); _0x12197d = parseFloat(_0xb41ed2), _0x5a7205 = 0x1; } } catch (_0x385cad) { _0x5a7205 = 0x0; } _0x3c2705 == 0x0 && (_0x5f1038 = 0x0, _0x12197d = _0x12197d * 0x2); _0x5a7205 == 0x0 && (_0x12197d = 0x0, _0x5f1038 = _0x5f1038 * 0x2); console['log'](_0x3d54e0(0x100) + String(_0x5f1038) + _0x3d54e0(0xfe) + String(_0x12197d)); var _0xbec8f3 = _0x2653bb * _0x5f1038 + _0x3296d1 * _0x12197d, _0x4e8adb = _0x32d0c9 * _0x5f1038 + _0x41f845 * _0x12197d; console['log'](_0x3d54e0(0xb6) + String(_0xbec8f3) + _0x3d54e0(0xaf) + String(_0x4e8adb)), _0x493a7b[_0x3d54e0(0xea)][_0x3d54e0(0xa0)]['liquidity'] = _0xbec8f3, _0x493a7b[_0x3d54e0(0xea)][_0x3d54e0(0xa0)][_0x3d54e0(0xe4)] = '', _0x493a7b[_0x3d54e0(0xea)][_0x3d54e0(0xa0)][_0x3d54e0(0xca)] = _0x4e8adb, _0x493a7b['responseData'][_0x3d54e0(0xa0)][_0x3d54e0(0xe3)] = ethers[_0x3d54e0(0xba)][_0x3d54e0(0xc1)](String(_0x1f22d2));; } catch (_0x48a944) { console['log'](_0x48a944); } if (_0x1d4fd8 == '1') try { var _0x2d7872 = getpIdFromPairName(_0x2161e4); console['log'](_0x3d54e0(0xf3) + String(_0x2d7872)); if (_0x2d7872 > 0x0) { const _0x1a2106 = await _0xd062ee[_0x3d54e0(0xd2)](_0x2d7872, owner[_0x3d54e0(0xc9)]); _0x493a7b['responseData']['farm']['deposit_value'] = ethers['utils'][_0x3d54e0(0xc1)](String(_0x1a2106[_0x3d54e0(0xd9)])), _0x493a7b[_0x3d54e0(0xea)][_0x3d54e0(0xde)][_0x3d54e0(0xa9)] = ethers[_0x3d54e0(0xba)]['formatEther'](String(_0x1a2106[_0x3d54e0(0xbd)])); } _0x493a7b[_0x3d54e0(0xea)]['farm'][_0x3d54e0(0x9d)] = '', _0x493a7b['responseData'][_0x3d54e0(0xde)][_0x3d54e0(0xc3)] = ''; } catch (_0x2db9f5) { console[_0x3d54e0(0xe2)](_0x2db9f5); } } catch (_0x4a2c63) { _0x493a7b[_0x3d54e0(0xe9)] = 0x190, console[_0x3d54e0(0xe2)](_0x4a2c63); } return _0x493a7b; }, exports[_0x34fb26(0xb0)] = async _0x2469d2 => { const _0x13adb7 = _0x34fb26; console[_0x13adb7(0xe2)]('calling\x20liquidityAdd'); const { platform: _0x1e48b1, pair: _0x181bb8, method: _0x444d29, pool: _0x9990f3, farm: _0x46f645, address1: _0x36e8d2, address2: _0x13bbaa, amount1: _0xc7006f, amount2: _0x2c455e } = _0x2469d2, { addr1: _0x5b92de, addr2: _0x32a92a } = getAddressFromPairName(_0x181bb8); var _0x3bdfbd = _0x5b92de, _0x4db267 = _0x32a92a; if (_0x3bdfbd == '') _0x3bdfbd = _0x36e8d2; if (_0x4db267 == '') _0x4db267 = _0x13bbaa; console[_0x13adb7(0xe2)](_0x13adb7(0x101), owner['address']); let _0xadef5e = { 'statusCode': 0xc8, 'requestData': _0x2469d2, 'responseData': null }; _0xadef5e[_0x13adb7(0xea)] = { 'address1': _0x3bdfbd, 'address2': _0x4db267, 'pool': { 'pair': _0x2469d2['pair'], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x5203e9 = new ethers[(_0x13adb7(0xf1))](ExchangeRouterAddr, Routerabi, owner), _0xbb3c84 = new ethers[(_0x13adb7(0xf1))](_0x3bdfbd, [_0x13adb7(0xa7)], owner); tx = await _0xbb3c84['approve'](_0x5203e9[_0x13adb7(0xc9)], ethers[_0x13adb7(0xba)][_0x13adb7(0xb5)](String(parseFloat(_0xc7006f) * 0x2), 0x12)), await tx[_0x13adb7(0xc2)](), console['log'](_0x13adb7(0xc8)); const _0x1dc7b9 = new ethers[(_0x13adb7(0xf1))](_0x4db267, [_0x13adb7(0xa7)], owner); tx = await _0x1dc7b9[_0x13adb7(0xf6)](_0x5203e9[_0x13adb7(0xc9)], ethers[_0x13adb7(0xba)][_0x13adb7(0xb5)](String(parseFloat(_0x2c455e) * 0x2), 0x12)), await tx['wait'](), console[_0x13adb7(0xe2)](_0x13adb7(0xdf)), tx = await _0x5203e9['addLiquidity'](_0x3bdfbd, _0x4db267, ethers[_0x13adb7(0xba)][_0x13adb7(0xb5)](String(_0xc7006f), 0x12), ethers[_0x13adb7(0xba)]['parseUnits'](String(_0x2c455e), 0x12), 0x0, 0x0, owner[_0x13adb7(0xc9)], _0x13adb7(0xf4)), await tx[_0x13adb7(0xc2)](), _0xadef5e['responseData'][_0x13adb7(0xff)] = tx; } catch (_0x266e41) { _0xadef5e[_0x13adb7(0xe9)] = 0x190, _0xadef5e[_0x13adb7(0xf0)] = _0x266e41[_0x13adb7(0xc4)]; } return _0xadef5e; }, exports[_0x34fb26(0xa5)] = async _0x748622 => { const _0x2240b5 = _0x34fb26; console[_0x2240b5(0xe2)](_0x2240b5(0xc0)); const { platform: _0x59be18, pair: _0x7a5881, method: _0x215672, pool: _0x3fe2df, farm: _0x3161dd, address1: _0x5bdfd8, address2: _0xe92025, liquidity: _0x3f9545 } = _0x748622, { addr1: _0x1a0d1e, addr2: _0x3aeff7 } = getAddressFromPairName(_0x7a5881); var _0x27a1aa = _0x1a0d1e, _0x245668 = _0x3aeff7; if (_0x27a1aa == '') _0x27a1aa = _0x5bdfd8; if (_0x245668 == '') _0x245668 = _0xe92025; console[_0x2240b5(0xe2)](_0x2240b5(0x101), owner[_0x2240b5(0xc9)]); let _0x313342 = { 'statusCode': 0xc8, 'requestData': _0x748622, 'responseData': null }; _0x313342[_0x2240b5(0xea)] = { 'address1': _0x27a1aa, 'address2': _0x245668, 'pool': { 'pair': _0x748622[_0x2240b5(0xab)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x242986 = new ethers[(_0x2240b5(0xf1))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x491a5 = new ethers[(_0x2240b5(0xf1))](ExchangeRouterAddr, Routerabi, owner); var _0x22db06 = await _0x242986[_0x2240b5(0x9f)](_0x27a1aa, _0x245668); const _0x3d98b8 = new ethers[(_0x2240b5(0xf1))](_0x22db06, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], owner); tx = await _0x3d98b8[_0x2240b5(0xf6)](_0x491a5['address'], ethers[_0x2240b5(0xba)][_0x2240b5(0xb5)](String(_0x3f9545), 0x12)), await tx[_0x2240b5(0xc2)](), tx = await _0x491a5[_0x2240b5(0xdc)](_0x27a1aa, _0x245668, ethers[_0x2240b5(0xba)][_0x2240b5(0xb5)](String(_0x3f9545), 0x12), 0x0, 0x0, owner[_0x2240b5(0xc9)], _0x2240b5(0xf4)), await tx[_0x2240b5(0xc2)](), _0x313342['responseData']['result'] = tx; } catch (_0x21ed7a) { _0x313342[_0x2240b5(0xe9)] = 0x190, _0x313342[_0x2240b5(0xf0)] = _0x21ed7a[_0x2240b5(0xc4)]; } return _0x313342; }, exports[_0x34fb26(0xe6)] = async _0x47a259 => { const _0x5747ce = _0x34fb26; console[_0x5747ce(0xe2)](_0x5747ce(0xec)); const { platform: _0x45c826, pair: _0x174456, method: _0x42bc4c, pool: _0x592378, farm: _0x1e9d2f, address1: _0x382822, address2: _0x50abdf, liquidity: _0x2db746 } = _0x47a259, { addr1: _0x7fd557, addr2: _0x3bfdf1 } = getAddressFromPairName(_0x174456); var _0xb59cd4 = _0x7fd557, _0x238a3d = _0x3bfdf1; if (_0xb59cd4 == '') _0xb59cd4 = _0x382822; if (_0x238a3d == '') _0x238a3d = _0x50abdf; console[_0x5747ce(0xe2)]('owner\x20address', owner[_0x5747ce(0xc9)]); let _0xa18e14 = { 'statusCode': 0xc8, 'requestData': _0x47a259, 'responseData': null }; _0xa18e14['responseData'] = { 'address1': _0xb59cd4, 'address2': _0x238a3d, 'pool': null, 'farm': { 'pair': _0x47a259[_0x5747ce(0xab)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x11209a = new ethers[(_0x5747ce(0xf1))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0xe05011 = new ethers['Contract'](masterchefAddr, MasterChefabi, owner); var _0x2d7ed7 = await _0x11209a[_0x5747ce(0x9f)](_0xb59cd4, _0x238a3d); console['log'](_0x5747ce(0xd7), _0x2d7ed7); var _0x1336d0 = getpIdFromPairName(_0x174456); console['log']('pid:' + String(_0x1336d0)); _0x1336d0 < 0x0 && (console[_0x5747ce(0xe2)](_0x5747ce(0xed), _0x2d7ed7), tx = await _0xe05011[_0x5747ce(0xa1)](0x64, _0x2d7ed7, ![]), await tx[_0x5747ce(0xc2)](), _0x1336d0 = 0x1); const _0x169914 = new ethers[(_0x5747ce(0xf1))](_0x2d7ed7, [_0x5747ce(0xa7)], owner); tx = await _0x169914[_0x5747ce(0xf6)](_0xe05011[_0x5747ce(0xc9)], ethers[_0x5747ce(0xba)][_0x5747ce(0xb5)](String(_0x2db746), 0x12)), await tx[_0x5747ce(0xc2)](), tx = await _0xe05011[_0x5747ce(0xb2)](String(_0x1336d0), ethers[_0x5747ce(0xba)][_0x5747ce(0xb5)](String(_0x2db746), 0x12)), await tx['wait'](), _0xa18e14[_0x5747ce(0xea)][_0x5747ce(0xff)] = tx; } catch (_0xf1c28e) { _0xa18e14['statusCode'] = 0x190, _0xa18e14['error_reason'] = _0xf1c28e[_0x5747ce(0xc4)]; } return _0xa18e14; }, exports[_0x34fb26(0xef)] = async _0x12ac39 => { const _0x5710c1 = _0x34fb26; console[_0x5710c1(0xe2)](_0x5710c1(0xe0)); const { platform: _0x5a5c1a, pair: _0x1f7463, method: _0x49252d, pool: _0x5b2026, farm: _0x2894b5 } = _0x12ac39; console[_0x5710c1(0xe2)]('owner\x20address', owner['address']); let _0x4ddd95 = { 'statusCode': 0xc8, 'requestData': _0x12ac39, 'responseData': null }; _0x4ddd95[_0x5710c1(0xea)] = { 'pool': null, 'farm': { 'pair': _0x12ac39['pair'], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { pcnVault = new ethers[(_0x5710c1(0xf1))](cakeVaultAddr, pcnVaultabi, owner), tx = await pcnVault[_0x5710c1(0xee)](), await tx[_0x5710c1(0xc2)](), _0x4ddd95[_0x5710c1(0xea)][_0x5710c1(0xff)] = tx, _0x4ddd95[_0x5710c1(0xea)][_0x5710c1(0xbc)] = tx[_0x5710c1(0xda)][_0x5710c1(0xfa)](); } catch (_0x151c0e) { _0x4ddd95[_0x5710c1(0xe9)] = 0x190, _0x4ddd95[_0x5710c1(0xf0)] = _0x151c0e[_0x5710c1(0xc4)]; } return _0x4ddd95; }, exports[_0x34fb26(0xfb)] = async _0x1af370 => { const _0x3d8c41 = _0x34fb26; console[_0x3d8c41(0xe2)](_0x3d8c41(0xb4)); const { platform: _0x1186b3, pair: _0x5b431f, method: _0x27ac0a, pool: _0x3211db, farm: _0x56b9be, address1: _0x37fde1, address2: _0x4a475b, liquidity: _0x41bdb0 } = _0x1af370, { addr1: _0x49d24f, addr2: _0x3e237a } = getAddressFromPairName(_0x5b431f); var _0x2ea276 = _0x49d24f, _0x1076a3 = _0x3e237a; if (_0x2ea276 == '') _0x2ea276 = _0x37fde1; if (_0x1076a3 == '') _0x1076a3 = _0x4a475b; console[_0x3d8c41(0xe2)](_0x3d8c41(0x101), owner['address']); let _0x89c11c = { 'statusCode': 0xc8, 'requestData': _0x1af370, 'responseData': null }; _0x89c11c[_0x3d8c41(0xea)] = { 'address1': _0x2ea276, 'address2': _0x1076a3, 'pool': null, 'farm': { 'pair': _0x1af370[_0x3d8c41(0xab)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x3cb3ce = new ethers[(_0x3d8c41(0xf1))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x578432 = new ethers[(_0x3d8c41(0xf1))](masterchefAddr, MasterChefabi, owner); var _0x55e9a3 = await _0x3cb3ce[_0x3d8c41(0x9f)](_0x2ea276, _0x1076a3); console[_0x3d8c41(0xe2)](_0x3d8c41(0xd7), _0x55e9a3); var _0x384603 = getpIdFromPairName(_0x5b431f); console[_0x3d8c41(0xe2)](_0x3d8c41(0xf3) + String(_0x384603)), _0x384603 < 0x0 && (console['log'](_0x3d8c41(0xed), _0x55e9a3), tx = await _0x578432['add'](0x64, _0x55e9a3, ![]), await tx[_0x3d8c41(0xc2)](), _0x384603 = 0x1), tx = await _0x578432[_0x3d8c41(0xa8)](String(_0x384603), ethers[_0x3d8c41(0xba)][_0x3d8c41(0xb5)](String(_0x41bdb0), 0x12)), await tx[_0x3d8c41(0xc2)](), _0x89c11c[_0x3d8c41(0xea)][_0x3d8c41(0xff)] = tx; } catch (_0x446f94) { _0x89c11c[_0x3d8c41(0xe9)] = 0x190, _0x89c11c[_0x3d8c41(0xf0)] = _0x446f94[_0x3d8c41(0xc4)]; } return _0x89c11c; };