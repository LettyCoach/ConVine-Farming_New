const _0x4a1911 = _0x62f6; (function (_0x55f01f, _0x31dae1) { const _0x161d30 = _0x62f6, _0x4f38ad = _0x55f01f(); while (!![]) { try { const _0xe93f5e = -parseInt(_0x161d30(0x22b)) / 0x1 * (-parseInt(_0x161d30(0x222)) / 0x2) + parseInt(_0x161d30(0x23c)) / 0x3 * (parseInt(_0x161d30(0x223)) / 0x4) + -parseInt(_0x161d30(0x24d)) / 0x5 * (parseInt(_0x161d30(0x217)) / 0x6) + -parseInt(_0x161d30(0x216)) / 0x7 + -parseInt(_0x161d30(0x202)) / 0x8 + parseInt(_0x161d30(0x20c)) / 0x9 + parseInt(_0x161d30(0x1fc)) / 0xa; if (_0xe93f5e === _0x31dae1) break; else _0x4f38ad['push'](_0x4f38ad['shift']()); } catch (_0x59560a) { _0x4f38ad['push'](_0x4f38ad['shift']()); } } }(_0x3495, 0xaee1c)); const ethers = require(_0x4a1911(0x252)); var fs = require('fs'); const Addresses = require(_0x4a1911(0x21a)); var data = fs['readFileSync'](__dirname + '/abi/PcnVault.json', _0x4a1911(0x22f)); const pcnVaultabi = JSON[_0x4a1911(0x1ef)](data)[_0x4a1911(0x227)]; data = fs[_0x4a1911(0x22e)](__dirname + _0x4a1911(0x1ff), 'utf-8'); const Routerabi = JSON[_0x4a1911(0x1ef)](data)[_0x4a1911(0x227)]; data = fs[_0x4a1911(0x22e)](__dirname + '/abi/NeondexFactory.json', _0x4a1911(0x22f)); const ExchangeFactoryabi = JSON['parse'](data)[_0x4a1911(0x227)]; data = fs[_0x4a1911(0x22e)](__dirname + _0x4a1911(0x212), _0x4a1911(0x22f)); const busdabi = JSON['parse'](data)[_0x4a1911(0x227)]; function _0x3495() { const _0x15a942 = ['pool', 'reward_value', 'SushiSwapWETH', 'liquidity', 'statusGet', '/abi/MasterChef.json', 'ETH-USDT', 'userInfo', '0xd094758b9ee14eb5781835359297f1b9cbf102c8a4a499e650d28ff27d2d94d8', 'AAVE-ETH', 'farm', '134445ypOhLU', 'calling\x20liquidityAdd', 'calling\x20statusGet', 'pid:\x20', 'log', 'ethers', 'poolInfo', 'result', 'parse', 'farmingWithdraw', 'pair', 'address', 'SushiSwapSushi', '/abi/NeondexPair.json', 'tokenLp\x20token', 'SUSHI-ETH', 'reason', 'SushiSwapExchangeFactory', 'owner\x20address', 'liquidityAdd', 'SushiSwapVault', '6069030BKXdpe', ',\x20liquidity2_value=', 'harvest_value', '/abi/NeondexRouter.json', 'getPair', 'withdraw', '3481616tZWjpQ', 'lpToken', 'removeLiquidity', 'decimals', 'Contract', 'USDT-ETH', 'amount', 'statusCode', 'https://ethereum.publicnode.com', 'utils', '1362492jxuWxT', 'approve', 'deposit', 'SushiSwapIlv', 'ETH-AAVE', 'SushiSwapUsdt', '/abi/BEP20Token.json', 'getBalance', 'formatEther', 'responseData', '5073495gxmAXT', '18XmXyJS', '111111111111111111111', 'balanceOf', '../../core_scripts/config/addresses.json', 'SushiSwapAave', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', 'USDC-ETH', 'formatUnits', 'toNumber', 'rewardDebt', 'getAmountsIn', '2Tddcay', '20292IsVxVk', 'calling\x20farmingDeposit', 'ETH-USDC', 'ILV-ETH', 'abi', 'value', 'calling\x20farmingHarvest', 'error_reason', '92765DUMlUS', 'ETH-SUSHI', 'SushiSwapUsdc', 'readFileSync', 'utf-8', 'ETH-ILV', ',\x20liquidity2=', 'pid:', 'parseUnits', 'SushiSwapExchangeRouter', 'add', 'wait', 'calling\x20farmingWithdraw', 'JsonRpcProvider', 'liquidity1=', 'poolLength', 'APR', '654PaHOan', 'deposit_value', 'liquidityRemove', 'LPTokens', 'env', 'farmingDeposit']; _0x3495 = function () { return _0x15a942; }; return _0x3495(); } data = fs[_0x4a1911(0x22e)](__dirname + _0x4a1911(0x247), _0x4a1911(0x22f)); const MasterChefabi = JSON[_0x4a1911(0x1ef)](data)[_0x4a1911(0x227)]; data = fs[_0x4a1911(0x22e)](__dirname + _0x4a1911(0x1f4), _0x4a1911(0x22f)); function _0x62f6(_0x46b656, _0x7f8113) { const _0x3495f5 = _0x3495(); return _0x62f6 = function (_0x62f629, _0x5d6634) { _0x62f629 = _0x62f629 - 0x1ee; let _0x3a58cb = _0x3495f5[_0x62f629]; return _0x3a58cb; }, _0x62f6(_0x46b656, _0x7f8113); } const LPPairabi = JSON[_0x4a1911(0x1ef)](data)[_0x4a1911(0x227)], provider = new ethers['providers'][(_0x4a1911(0x238))](_0x4a1911(0x20a)); let private_key = process[_0x4a1911(0x240)]['PRIVATEKEY']; const owner = new ethers['Wallet'](_0x4a1911(0x24a), provider), ExchangeFactoryAddr = Addresses[_0x4a1911(0x1f8)], ExchangeRouterAddr = Addresses[_0x4a1911(0x234)], cakeVaultAddr = Addresses[_0x4a1911(0x1fb)], masterchefAddr = Addresses['SushiSwapmasterchef'], UsdtAddr = Addresses[_0x4a1911(0x211)]; function getpIdFromPairName(_0x5a3e00) { const _0x2847cf = _0x4a1911; var _0x3f5ebc = 0x0; switch (_0x5a3e00) { case _0x2847cf(0x230): case _0x2847cf(0x226): _0x3f5ebc = 0xf4; break; case _0x2847cf(0x22c): case _0x2847cf(0x1f6): _0x3f5ebc = 0xc; break; case 'ETH-AAVE': case _0x2847cf(0x24b): _0x3f5ebc = 0x25; break; case 'ETH-USDT': case 'USDT-ETH': _0x3f5ebc = 0x0; break; case _0x2847cf(0x225): case _0x2847cf(0x21d): _0x3f5ebc = 0x1; break; default: break; }return _0x3f5ebc; } function getAddressFromPairName(_0x5908c0) { const _0x31b0c5 = _0x4a1911; var _0x5ebbcd = 0x0, _0x43e681 = '', _0x470704 = ''; switch (_0x5908c0) { case 'ETH-ILV': _0x43e681 = Addresses[_0x31b0c5(0x244)], _0x470704 = Addresses[_0x31b0c5(0x20f)]; break; case 'ILV-ETH': _0x470704 = Addresses[_0x31b0c5(0x244)], _0x43e681 = Addresses['SushiSwapIlv']; break; case _0x31b0c5(0x22c): _0x43e681 = Addresses[_0x31b0c5(0x244)], _0x470704 = Addresses[_0x31b0c5(0x1f3)]; break; case _0x31b0c5(0x1f6): _0x470704 = Addresses[_0x31b0c5(0x244)], _0x43e681 = Addresses[_0x31b0c5(0x1f3)]; break; case _0x31b0c5(0x210): _0x43e681 = Addresses[_0x31b0c5(0x244)], _0x470704 = Addresses[_0x31b0c5(0x21b)]; break; case 'AAVE-ETH': _0x470704 = Addresses[_0x31b0c5(0x244)], _0x43e681 = Addresses[_0x31b0c5(0x21b)]; break; case _0x31b0c5(0x248): _0x43e681 = Addresses['SushiSwapWETH'], _0x470704 = Addresses[_0x31b0c5(0x211)]; break; case _0x31b0c5(0x207): _0x470704 = Addresses[_0x31b0c5(0x244)], _0x43e681 = Addresses['SushiSwapUsdt']; break; case _0x31b0c5(0x225): _0x43e681 = Addresses[_0x31b0c5(0x244)], _0x470704 = Addresses[_0x31b0c5(0x22d)]; break; case _0x31b0c5(0x21d): _0x470704 = Addresses[_0x31b0c5(0x244)], _0x43e681 = Addresses[_0x31b0c5(0x22d)]; break; default: break; }return res = { 'addr1': _0x43e681, 'addr2': _0x470704 }, res; } async function findPid(_0x1993b8, _0x50900d, _0xe6f043) { const _0x5ef16a = _0x4a1911; console['log'](_0x5ef16a(0x1f5), _0xe6f043); var _0x493f83 = 0x0; try { const _0x26fb97 = await _0x50900d[_0x5ef16a(0x23a)](); console[_0x5ef16a(0x251)](ethers[_0x5ef16a(0x20b)][_0x5ef16a(0x214)](String(_0x26fb97))); while (0x1) { const _0x191ac3 = await _0x50900d[_0x5ef16a(0x253)](String(_0x493f83)); console[_0x5ef16a(0x251)](_0x493f83); if (_0x191ac3[_0x5ef16a(0x203)] == _0xe6f043) { console[_0x5ef16a(0x251)](_0x5ef16a(0x232) + String(_0x493f83)); break; } _0x493f83++; } } catch (_0x1502db) { console[_0x5ef16a(0x251)]('Add\x20', _0xe6f043), console[_0x5ef16a(0x251)](_0x5ef16a(0x250), String(_0x493f83)), tx = await _0x50900d[_0x5ef16a(0x235)](0x3e8, _0xe6f043, ![]), await tx[_0x5ef16a(0x236)](); } } exports[_0x4a1911(0x246)] = async _0x2b58cf => { const _0x4a1c16 = _0x4a1911; console[_0x4a1c16(0x251)](_0x4a1c16(0x24f)); const { platform: _0x166651, pair: _0xf4d85f, method: _0x384deb, pool: _0x262fed, farm: _0x253b29, address1: _0x597486, address2: _0x38afbe } = _0x2b58cf, { addr1: _0x3c752f, addr2: _0x56786a } = getAddressFromPairName(_0xf4d85f); var _0x1b6db7 = _0x3c752f, _0x6db065 = _0x56786a; if (_0x1b6db7 == '') _0x1b6db7 = _0x597486; if (_0x6db065 == '') _0x6db065 = _0x38afbe; let _0x30630d = { 'statusCode': 0xc8, 'requestData': _0x2b58cf, 'responseData': null }; try { console[_0x4a1c16(0x251)]('owner\x20address', owner[_0x4a1c16(0x1f2)]); const _0x506c6b = await provider[_0x4a1c16(0x213)](owner[_0x4a1c16(0x1f2)]), _0x15d196 = ethers['utils'][_0x4a1c16(0x21e)](_0x506c6b, 0x12); console['log']('balance0ETH', _0x15d196); const _0x37bfab = new ethers[(_0x4a1c16(0x206))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x1e6dea = new ethers[(_0x4a1c16(0x206))](ExchangeRouterAddr, Routerabi, owner), _0x8ce5b = new ethers['Contract'](masterchefAddr, MasterChefabi, owner); var _0x139b35 = await _0x37bfab['getPair'](_0x1b6db7, _0x6db065); const _0x29fff3 = new ethers[(_0x4a1c16(0x206))](_0x139b35, LPPairabi, owner); _0x30630d[_0x4a1c16(0x215)] = { 'wallet_balance': _0x15d196, 'pairAddr': _0x139b35, 'address1': _0x1b6db7, 'address2': _0x6db065, 'pool': { 'pair': _0x2b58cf[_0x4a1c16(0x1f1)], 'liquidity': '', 'volume': '', 'liquidity_value': '', 'LPTokens': '' }, 'farm': { 'pair': _0x2b58cf[_0x4a1c16(0x1f1)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; if (_0x262fed == '1') try { const _0xec0427 = await _0x29fff3[_0x4a1c16(0x205)](); console[_0x4a1c16(0x251)](_0xec0427); const _0x36e4de = await _0x29fff3[_0x4a1c16(0x219)](owner[_0x4a1c16(0x1f2)]), _0x37dcdc = new ethers[(_0x4a1c16(0x206))](_0x1b6db7, busdabi, owner), _0x4bd21b = new ethers[(_0x4a1c16(0x206))](_0x6db065, busdabi, owner), _0xc031e = await _0x37dcdc['balanceOf'](_0x139b35), _0x4c4883 = await _0x4bd21b[_0x4a1c16(0x219)](_0x139b35), _0x40973c = await _0x37dcdc['balanceOf'](owner[_0x4a1c16(0x1f2)]), _0x289095 = await _0x4bd21b[_0x4a1c16(0x219)](owner[_0x4a1c16(0x1f2)]); var _0x23be15 = parseFloat(ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0xc031e))), _0x1aeeb9 = parseFloat(ethers['utils'][_0x4a1c16(0x214)](String(_0x4c4883))), _0x4dfc72 = parseFloat(ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0x40973c))), _0x5247d9 = parseFloat(ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0x289095))); console[_0x4a1c16(0x251)]('liquidity1_value=' + String(_0x4dfc72) + _0x4a1c16(0x1fd) + String(_0x5247d9)), console[_0x4a1c16(0x251)](_0x4a1c16(0x239) + String(_0x23be15) + _0x4a1c16(0x231) + String(_0x1aeeb9)); var _0x7e5688 = 0x1, _0xdcc1df = 0x1, _0x2d31ce = 0x0, _0x196017 = 0x0, _0x52de47 = 0xe8d4a51000; try { if (UsdtAddr != _0x1b6db7) { _0x7e5688 = await _0x1e6dea[_0x4a1c16(0x221)](ethers[_0x4a1c16(0x20b)]['parseUnits'](String('1'), _0xec0427), [UsdtAddr, _0x1b6db7]); var _0x34b9fc = ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0x7e5688[0x0])); _0x7e5688 = parseFloat(_0x34b9fc) * _0x52de47, console['log'](_0x7e5688), _0x2d31ce = 0x1; } else _0x2d31ce = 0x1, _0x7e5688 = 0x1, _0x4dfc72 = _0x4dfc72 * _0x52de47, _0x23be15 = _0x23be15 * _0x52de47; } catch (_0x45eecb) { _0x2d31ce = 0x0; } try { if (UsdtAddr != _0x6db065) { _0xdcc1df = await _0x1e6dea[_0x4a1c16(0x221)](ethers[_0x4a1c16(0x20b)]['parseUnits'](String('1'), _0xec0427), [UsdtAddr, _0x6db065]), console[_0x4a1c16(0x251)](ethers[_0x4a1c16(0x20b)]['formatEther'](String(_0xdcc1df[0x0]))); var _0x34b9fc = ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0xdcc1df[0x0])); _0xdcc1df = parseFloat(_0x34b9fc) * _0x52de47, console[_0x4a1c16(0x251)](_0xdcc1df), _0x196017 = 0x1; } else _0x196017 = 0x1, _0xdcc1df = 0x1, _0x5247d9 = _0x5247d9 * _0x52de47, _0x1aeeb9 = _0x1aeeb9 * _0x52de47; } catch (_0x9913a7) { _0x196017 = 0x0; } _0x2d31ce == 0x0 && (_0x7e5688 = 0x0, _0xdcc1df = _0xdcc1df * 0x2); _0x196017 == 0x0 && (_0xdcc1df = 0x0, _0x7e5688 = _0x7e5688 * 0x2); var _0x485c4c = _0x23be15 * _0x7e5688 + _0x1aeeb9 * _0xdcc1df, _0x1baa57 = _0x4dfc72 * _0x7e5688 + _0x5247d9 * _0xdcc1df; console[_0x4a1c16(0x251)]('liquidity=' + String(_0x485c4c) + ',liquidity_value\x20=' + String(_0x1baa57)), _0x30630d[_0x4a1c16(0x215)][_0x4a1c16(0x242)][_0x4a1c16(0x245)] = _0x485c4c, _0x30630d[_0x4a1c16(0x215)][_0x4a1c16(0x242)]['volume'] = '', _0x30630d[_0x4a1c16(0x215)]['pool']['liquidity_value'] = _0x1baa57, _0x30630d['responseData']['pool'][_0x4a1c16(0x23f)] = ethers['utils'][_0x4a1c16(0x214)](String(_0x36e4de));; } catch (_0x20f3c3) { console[_0x4a1c16(0x251)](_0x20f3c3); } if (_0x253b29 == '1') try { var _0x408559 = getpIdFromPairName(_0xf4d85f); console[_0x4a1c16(0x251)]('pid:' + String(_0x408559)); if (_0x408559 > -0x1) { const _0x3c1100 = await _0x8ce5b[_0x4a1c16(0x249)](_0x408559, owner['address']); _0x30630d[_0x4a1c16(0x215)]['farm'][_0x4a1c16(0x23d)] = ethers['utils']['formatEther'](String(_0x3c1100[_0x4a1c16(0x208)])), _0x30630d[_0x4a1c16(0x215)]['farm'][_0x4a1c16(0x243)] = ethers[_0x4a1c16(0x20b)][_0x4a1c16(0x214)](String(_0x3c1100[_0x4a1c16(0x220)])); } _0x30630d[_0x4a1c16(0x215)][_0x4a1c16(0x24c)][_0x4a1c16(0x23b)] = '', _0x30630d[_0x4a1c16(0x215)][_0x4a1c16(0x24c)]['LTV'] = ''; } catch (_0x277554) { console[_0x4a1c16(0x251)](_0x277554); } } catch (_0x27efce) { _0x30630d[_0x4a1c16(0x209)] = 0x190, _0x30630d[_0x4a1c16(0x22a)] = _0x27efce['reason'], console[_0x4a1c16(0x251)](_0x27efce); } return _0x30630d; }, exports[_0x4a1911(0x1fa)] = async _0x32bbd3 => { const _0x5ab02f = _0x4a1911; console[_0x5ab02f(0x251)](_0x5ab02f(0x24e)); const { platform: _0x3ad11b, pair: _0x115696, method: _0x3c6886, pool: _0x404d1c, farm: _0x96db6c, address1: _0x1bb501, address2: _0x7b1856, amount1: _0x5a6264, amount2: _0x40eb82 } = _0x32bbd3, { addr1: _0x38e0e0, addr2: _0x551fff } = getAddressFromPairName(_0x115696); var _0x282c86 = _0x38e0e0, _0x493e36 = _0x551fff; if (_0x282c86 == '') _0x282c86 = _0x1bb501; if (_0x493e36 == '') _0x493e36 = _0x7b1856; console['log']('owner\x20address', owner['address']); let _0x388a03 = { 'statusCode': 0xc8, 'requestData': _0x32bbd3, 'responseData': null }; _0x388a03[_0x5ab02f(0x215)] = { 'address1': _0x282c86, 'address2': _0x493e36, 'pool': { 'pair': _0x32bbd3[_0x5ab02f(0x1f1)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0xe7dbf3 = new ethers[(_0x5ab02f(0x206))](ExchangeRouterAddr, Routerabi, owner), _0x36ec2e = new ethers['Contract'](_0x282c86, busdabi, owner); tx = await _0x36ec2e[_0x5ab02f(0x20d)](_0xe7dbf3['address'], ethers[_0x5ab02f(0x20b)][_0x5ab02f(0x233)](String(parseFloat(_0x5a6264) * 0x2), 0x12)), await tx[_0x5ab02f(0x236)](), console[_0x5ab02f(0x251)]('approve\x20token1'); const _0x58703d = new ethers[(_0x5ab02f(0x206))](_0x493e36, busdabi, owner); tx = await _0x58703d[_0x5ab02f(0x20d)](_0xe7dbf3['address'], ethers[_0x5ab02f(0x20b)]['parseUnits'](String(parseFloat(_0x40eb82) * 0x2), 0x12)), await tx['wait'](), console[_0x5ab02f(0x251)]('approve\x20token2'); var _0x49215f = 0x12, _0x62d718 = 0x12; if (_0x282c86 == UsdtAddr) _0x49215f = 0x6; if (_0x493e36 == UsdtAddr) _0x62d718 = 0x6; tx = await _0xe7dbf3['addLiquidity'](_0x282c86, _0x493e36, ethers[_0x5ab02f(0x20b)]['parseUnits'](String(_0x5a6264), _0x49215f), ethers[_0x5ab02f(0x20b)][_0x5ab02f(0x233)](String(_0x40eb82), _0x62d718), 0x0, 0x0, owner[_0x5ab02f(0x1f2)], _0x5ab02f(0x218)), await tx['wait'](), _0x388a03[_0x5ab02f(0x215)]['result'] = tx; } catch (_0x2000d3) { _0x388a03[_0x5ab02f(0x209)] = 0x190, _0x388a03[_0x5ab02f(0x22a)] = _0x2000d3[_0x5ab02f(0x1f7)], console[_0x5ab02f(0x251)](_0x2000d3); } return _0x388a03; }, exports[_0x4a1911(0x23e)] = async _0x43e88e => { const _0x4bde5c = _0x4a1911; console[_0x4bde5c(0x251)]('calling\x20liquidityRemove'); const { platform: _0x4e408a, pair: _0x4ece82, method: _0x31b801, pool: _0x5692a7, farm: _0x58c46f, address1: _0x374d00, address2: _0x5ded29, liquidity: _0x423ed8 } = _0x43e88e, { addr1: _0x36a188, addr2: _0x1f03fe } = getAddressFromPairName(_0x4ece82); var _0x552742 = _0x36a188, _0x3529e7 = _0x1f03fe; if (_0x552742 == '') _0x552742 = _0x374d00; if (_0x3529e7 == '') _0x3529e7 = _0x5ded29; console[_0x4bde5c(0x251)](_0x4bde5c(0x1f9), owner['address']); let _0x32cc7 = { 'statusCode': 0xc8, 'requestData': _0x43e88e, 'responseData': null }; _0x32cc7[_0x4bde5c(0x215)] = { 'address1': _0x552742, 'address2': _0x3529e7, 'pool': { 'pair': _0x43e88e[_0x4bde5c(0x1f1)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x4e6003 = new ethers[(_0x4bde5c(0x206))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x103472 = new ethers[(_0x4bde5c(0x206))](ExchangeRouterAddr, Routerabi, owner); var _0x436f82 = await _0x4e6003[_0x4bde5c(0x200)](_0x552742, _0x3529e7); const _0x3e0b3e = new ethers['Contract'](_0x436f82, [_0x4bde5c(0x21c)], owner); tx = await _0x3e0b3e[_0x4bde5c(0x20d)](_0x103472['address'], ethers[_0x4bde5c(0x20b)]['parseUnits'](String(_0x423ed8), 0x12)), await tx[_0x4bde5c(0x236)](), tx = await _0x103472[_0x4bde5c(0x204)](_0x552742, _0x3529e7, ethers[_0x4bde5c(0x20b)][_0x4bde5c(0x233)](String(_0x423ed8), 0x12), 0x0, 0x0, owner['address'], _0x4bde5c(0x218)), await tx[_0x4bde5c(0x236)](), _0x32cc7['responseData'][_0x4bde5c(0x1ee)] = tx; } catch (_0x3db2f5) { _0x32cc7[_0x4bde5c(0x209)] = 0x190, _0x32cc7['error_reason'] = _0x3db2f5[_0x4bde5c(0x1f7)]; } return _0x32cc7; }, exports[_0x4a1911(0x241)] = async _0x24bdd3 => { const _0xbdd5d2 = _0x4a1911; console['log'](_0xbdd5d2(0x224)); const { platform: _0x560f23, pair: _0x12aed3, method: _0x52ee53, pool: _0x2062fa, farm: _0x168014, address1: _0x46b620, address2: _0x4e6d04, liquidity: _0x2c5d49 } = _0x24bdd3, { addr1: _0x2aa7e6, addr2: _0x3f4a7f } = getAddressFromPairName(_0x12aed3); var _0x14114d = _0x2aa7e6, _0x53eaef = _0x3f4a7f; if (_0x14114d == '') _0x14114d = _0x46b620; if (_0x53eaef == '') _0x53eaef = _0x4e6d04; console[_0xbdd5d2(0x251)](_0xbdd5d2(0x1f9), owner[_0xbdd5d2(0x1f2)]); let _0x15a148 = { 'statusCode': 0xc8, 'requestData': _0x24bdd3, 'responseData': null }; _0x15a148[_0xbdd5d2(0x215)] = { 'address1': _0x14114d, 'address2': _0x53eaef, 'pool': null, 'farm': { 'pair': _0x24bdd3[_0xbdd5d2(0x1f1)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x290e5 = new ethers['Contract'](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x28a2e5 = new ethers[(_0xbdd5d2(0x206))](masterchefAddr, MasterChefabi, owner); var _0x3bc570 = await _0x290e5[_0xbdd5d2(0x200)](_0x14114d, _0x53eaef); console[_0xbdd5d2(0x251)]('tokenLp\x20token', _0x3bc570); var _0x147818 = getpIdFromPairName(_0x12aed3); console[_0xbdd5d2(0x251)](_0xbdd5d2(0x232) + String(_0x147818)); _0x147818 < 0x0 && (console[_0xbdd5d2(0x251)]('Add\x20', _0x3bc570), tx = await _0x28a2e5['add'](0x64, _0x3bc570, ![]), await tx[_0xbdd5d2(0x236)](), _0x147818 = 0x0); const _0x2f68cb = new ethers[(_0xbdd5d2(0x206))](_0x3bc570, [_0xbdd5d2(0x21c)], owner); tx = await _0x2f68cb[_0xbdd5d2(0x20d)](_0x28a2e5[_0xbdd5d2(0x1f2)], ethers[_0xbdd5d2(0x20b)]['parseUnits'](String(_0x2c5d49), 0x12)), await tx[_0xbdd5d2(0x236)](), tx = await _0x28a2e5[_0xbdd5d2(0x20e)](String(_0x147818), ethers[_0xbdd5d2(0x20b)]['parseUnits'](String(_0x2c5d49), 0x12)), await tx['wait'](), _0x15a148[_0xbdd5d2(0x215)][_0xbdd5d2(0x1ee)] = tx; } catch (_0x49bff4) { _0x15a148['statusCode'] = 0x190, _0x15a148[_0xbdd5d2(0x22a)] = _0x49bff4['reason']; } return _0x15a148; }, exports['farmingHarvest'] = async _0x157c2c => { const _0x51fdaa = _0x4a1911; console[_0x51fdaa(0x251)](_0x51fdaa(0x229)); const { platform: _0x473f25, pair: _0x211764, method: _0x26141d, pool: _0x12ab87, farm: _0x3296bd } = _0x157c2c; console['log'](_0x51fdaa(0x1f9), owner[_0x51fdaa(0x1f2)]); let _0x259026 = { 'statusCode': 0xc8, 'requestData': _0x157c2c, 'responseData': null }; _0x259026[_0x51fdaa(0x215)] = { 'pool': null, 'farm': { 'pair': _0x157c2c[_0x51fdaa(0x1f1)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { var _0x1f82e2 = getpIdFromPairName(_0x211764); console[_0x51fdaa(0x251)](_0x51fdaa(0x232) + String(_0x1f82e2)); const _0x3c95af = new ethers[(_0x51fdaa(0x206))](masterchefAddr, MasterChefabi, owner); tx = await _0x3c95af[_0x51fdaa(0x20e)](String(_0x1f82e2), 0x0), await tx['wait'](), _0x259026[_0x51fdaa(0x215)][_0x51fdaa(0x1ee)] = tx, _0x259026['responseData'][_0x51fdaa(0x1fe)] = tx[_0x51fdaa(0x228)][_0x51fdaa(0x21f)](); } catch (_0x5889d3) { _0x259026[_0x51fdaa(0x209)] = 0x190, _0x259026['error_reason'] = _0x5889d3['reason']; } return _0x259026; }, exports[_0x4a1911(0x1f0)] = async _0x55077a => { const _0x517412 = _0x4a1911; console[_0x517412(0x251)](_0x517412(0x237)); const { platform: _0x4a2f77, pair: _0x5a2d6e, method: _0x9c1adf, pool: _0xae6cf3, farm: _0x423fe5, address1: _0x1d8b1, address2: _0x4c8ddc, liquidity: _0x11186d } = _0x55077a, { addr1: _0x2d1532, addr2: _0x1e7de5 } = getAddressFromPairName(_0x5a2d6e); var _0x3de6fe = _0x2d1532, _0x59042f = _0x1e7de5; if (_0x3de6fe == '') _0x3de6fe = _0x1d8b1; if (_0x59042f == '') _0x59042f = _0x4c8ddc; console[_0x517412(0x251)](_0x517412(0x1f9), owner[_0x517412(0x1f2)]); let _0x6f2078 = { 'statusCode': 0xc8, 'requestData': _0x55077a, 'responseData': null }; _0x6f2078['responseData'] = { 'address1': _0x3de6fe, 'address2': _0x59042f, 'pool': null, 'farm': { 'pair': _0x55077a[_0x517412(0x1f1)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x33dc43 = new ethers['Contract'](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x5b9028 = new ethers[(_0x517412(0x206))](masterchefAddr, MasterChefabi, owner); var _0x414ae2 = await _0x33dc43['getPair'](_0x3de6fe, _0x59042f); console[_0x517412(0x251)]('tokenLp\x20token', _0x414ae2); var _0x1b15cb = getpIdFromPairName(_0x5a2d6e); console['log'](_0x517412(0x232) + String(_0x1b15cb)), _0x1b15cb < 0x0 && (console[_0x517412(0x251)]('Add\x20', _0x414ae2), tx = await _0x5b9028['add'](0x64, _0x414ae2, ![]), await tx[_0x517412(0x236)](), _0x1b15cb = 0x1), tx = await _0x5b9028[_0x517412(0x201)](String(_0x1b15cb), ethers[_0x517412(0x20b)][_0x517412(0x233)](String(_0x11186d), 0x12)), await tx[_0x517412(0x236)](), _0x6f2078[_0x517412(0x215)][_0x517412(0x1ee)] = tx; } catch (_0x4821fe) { _0x6f2078[_0x517412(0x209)] = 0x190, _0x6f2078['error_reason'] = _0x4821fe['reason']; } return _0x6f2078; };