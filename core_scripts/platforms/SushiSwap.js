const _0x5bd078 = _0x23a7; (function (_0x24e09b, _0xb89ff5) { const _0x5aaecc = _0x23a7, _0x38a4c2 = _0x24e09b(); while (!![]) { try { const _0x1e16e3 = parseInt(_0x5aaecc(0x10a)) / 0x1 + parseInt(_0x5aaecc(0x107)) / 0x2 * (-parseInt(_0x5aaecc(0x116)) / 0x3) + parseInt(_0x5aaecc(0xec)) / 0x4 + -parseInt(_0x5aaecc(0x122)) / 0x5 * (parseInt(_0x5aaecc(0x11f)) / 0x6) + parseInt(_0x5aaecc(0x137)) / 0x7 * (-parseInt(_0x5aaecc(0x12d)) / 0x8) + parseInt(_0x5aaecc(0x10e)) / 0x9 + -parseInt(_0x5aaecc(0x138)) / 0xa * (parseInt(_0x5aaecc(0x120)) / 0xb); if (_0x1e16e3 === _0xb89ff5) break; else _0x38a4c2['push'](_0x38a4c2['shift']()); } catch (_0x3f735f) { _0x38a4c2['push'](_0x38a4c2['shift']()); } } }(_0x5e3a, 0x48b89)); function _0x23a7(_0x1ef1f5, _0x245328) { const _0x5e3ab1 = _0x5e3a(); return _0x23a7 = function (_0x23a755, _0x34d13f) { _0x23a755 = _0x23a755 - 0xdf; let _0x222746 = _0x5e3ab1[_0x23a755]; return _0x222746; }, _0x23a7(_0x1ef1f5, _0x245328); } const ethers = require(_0x5bd078(0xf4)); var fs = require('fs'); const Addresses = require(_0x5bd078(0xfa)); var data = fs[_0x5bd078(0x12f)](__dirname + _0x5bd078(0xf5), _0x5bd078(0x133)); const pcnVaultabi = JSON[_0x5bd078(0xfc)](data)[_0x5bd078(0x119)]; data = fs[_0x5bd078(0x12f)](__dirname + '/abi/NeondexRouter.json', _0x5bd078(0x133)); const Routerabi = JSON[_0x5bd078(0xfc)](data)[_0x5bd078(0x119)]; data = fs[_0x5bd078(0x12f)](__dirname + '/abi/NeondexFactory.json', _0x5bd078(0x133)); const ExchangeFactoryabi = JSON[_0x5bd078(0xfc)](data)[_0x5bd078(0x119)]; data = fs[_0x5bd078(0x12f)](__dirname + _0x5bd078(0x136), _0x5bd078(0x133)); const busdabi = JSON['parse'](data)[_0x5bd078(0x119)]; data = fs[_0x5bd078(0x12f)](__dirname + _0x5bd078(0x135), _0x5bd078(0x133)); const MasterChefabi = JSON[_0x5bd078(0xfc)](data)[_0x5bd078(0x119)]; data = fs[_0x5bd078(0x12f)](__dirname + '/abi/NeondexPair.json', 'utf-8'); const LPPairabi = JSON[_0x5bd078(0xfc)](data)[_0x5bd078(0x119)], ExchangeFactoryAddr = Addresses[_0x5bd078(0x110)], ExchangeRouterAddr = Addresses[_0x5bd078(0xf9)], cakeVaultAddr = Addresses['SushiSwapVault'], masterchefAddr = Addresses[_0x5bd078(0xf2)], UsdtAddr = Addresses['SushiSwapUsdt']; function getpIdFromPairName(_0x367874) { const _0xe3b1ed = _0x5bd078; var _0x5243d8 = 0x0; switch (_0x367874) { case _0xe3b1ed(0x117): case _0xe3b1ed(0x11d): _0x5243d8 = 0xf4; break; case _0xe3b1ed(0x113): case _0xe3b1ed(0xea): _0x5243d8 = 0xc; break; case _0xe3b1ed(0x13d): case _0xe3b1ed(0x114): _0x5243d8 = 0x25; break; case 'ETH-USDT': case _0xe3b1ed(0xf8): _0x5243d8 = 0x0; break; case _0xe3b1ed(0x134): case _0xe3b1ed(0xdf): _0x5243d8 = 0x1; break; default: break; }return _0x5243d8; } function getAddressFromPairName(_0x440e63) { const _0x148f31 = _0x5bd078; var _0x31913a = 0x0, _0x3b615e = '', _0x134a89 = ''; switch (_0x440e63) { case _0x148f31(0x117): _0x3b615e = Addresses[_0x148f31(0xf0)], _0x134a89 = Addresses[_0x148f31(0x106)]; break; case 'ILV-ETH': _0x134a89 = Addresses[_0x148f31(0xf0)], _0x3b615e = Addresses[_0x148f31(0x106)]; break; case _0x148f31(0x113): _0x3b615e = Addresses[_0x148f31(0xf0)], _0x134a89 = Addresses[_0x148f31(0x104)]; break; case _0x148f31(0xea): _0x134a89 = Addresses[_0x148f31(0xf0)], _0x3b615e = Addresses[_0x148f31(0x104)]; break; case _0x148f31(0x13d): _0x3b615e = Addresses['SushiSwapWETH'], _0x134a89 = Addresses['SushiSwapAave']; break; case _0x148f31(0x114): _0x134a89 = Addresses[_0x148f31(0xf0)], _0x3b615e = Addresses[_0x148f31(0xe6)]; break; case _0x148f31(0x12b): _0x3b615e = Addresses['SushiSwapWETH'], _0x134a89 = Addresses['SushiSwapUsdt']; break; case 'USDT-ETH': _0x134a89 = Addresses[_0x148f31(0xf0)], _0x3b615e = Addresses[_0x148f31(0xe0)]; break; case _0x148f31(0x134): _0x3b615e = Addresses[_0x148f31(0xf0)], _0x134a89 = Addresses[_0x148f31(0xfd)]; break; case 'USDC-ETH': _0x134a89 = Addresses[_0x148f31(0xf0)], _0x3b615e = Addresses['SushiSwapUsdc']; break; default: break; }return res = { 'addr1': _0x3b615e, 'addr2': _0x134a89 }, res; } async function findPid(_0x2bf385, _0x36079a, _0x2c59a9) { const _0x56d06a = _0x5bd078; console[_0x56d06a(0x131)]('tokenLp\x20token', _0x2c59a9); var _0x46ffac = 0x0; try { const _0x2ff57c = await _0x36079a[_0x56d06a(0xef)](); console[_0x56d06a(0x131)](ethers[_0x56d06a(0x10c)][_0x56d06a(0xf1)](String(_0x2ff57c))); while (0x1) { const _0x20c8fb = await _0x36079a['poolInfo'](String(_0x46ffac)); console[_0x56d06a(0x131)](_0x46ffac); if (_0x20c8fb[_0x56d06a(0x125)] == _0x2c59a9) { console[_0x56d06a(0x131)](_0x56d06a(0xee) + String(_0x46ffac)); break; } _0x46ffac++; } } catch (_0x6d3fc4) { console['log']('Add\x20', _0x2c59a9), console['log']('pid:\x20', String(_0x46ffac)), tx = await _0x36079a[_0x56d06a(0x13e)](0x3e8, _0x2c59a9, ![]), await tx[_0x56d06a(0xe3)](); } } exports[_0x5bd078(0x11b)] = async _0x5cc905 => { const _0xd9f0c = _0x5bd078; console[_0xd9f0c(0x131)](_0xd9f0c(0x115)); const { platform: _0x17b298, pair: _0xbb1992, method: _0x251249, pool: _0x513d80, farm: _0x58ea23, address1: _0x3caaa5, address2: _0x77f777, private_key: _0xf5020b, rpc_url: _0x17587d } = _0x5cc905, { addr1: _0x3e75a9, addr2: _0x86956e } = getAddressFromPairName(_0xbb1992), _0x3d98a7 = new ethers[(_0xd9f0c(0xfe))]['JsonRpcProvider'](_0x17587d), _0x22e8ff = new ethers[(_0xd9f0c(0x10b))](_0xf5020b, _0x3d98a7); var _0x33e5b9 = _0x3e75a9, _0x32267e = _0x86956e; if (_0x33e5b9 == '') _0x33e5b9 = _0x3caaa5; if (_0x32267e == '') _0x32267e = _0x77f777; let _0x39ecec = { 'statusCode': 0xc8, 'requestData': _0x5cc905, 'responseData': null }; try { console[_0xd9f0c(0x131)]('owner\x20address', _0x22e8ff['address']); const _0x41ba4b = await _0x3d98a7[_0xd9f0c(0x139)](_0x22e8ff[_0xd9f0c(0xf6)]), _0xe46fff = ethers[_0xd9f0c(0x10c)][_0xd9f0c(0x111)](_0x41ba4b, 0x12); console[_0xd9f0c(0x131)](_0xd9f0c(0x126), _0xe46fff); const _0x4da95f = new ethers[(_0xd9f0c(0xe5))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x22e8ff), _0x4f4689 = new ethers['Contract'](ExchangeRouterAddr, Routerabi, _0x22e8ff), _0x46b887 = new ethers['Contract'](masterchefAddr, MasterChefabi, _0x22e8ff); var _0x1b307c = await _0x4da95f['getPair'](_0x33e5b9, _0x32267e); const _0x14c345 = new ethers[(_0xd9f0c(0xe5))](_0x1b307c, LPPairabi, _0x22e8ff); _0x39ecec[_0xd9f0c(0xfb)] = { 'wallet_balance': _0xe46fff, 'pairAddr': _0x1b307c, 'address1': _0x33e5b9, 'address2': _0x32267e, 'pool': { 'pair': _0x5cc905[_0xd9f0c(0x12e)], 'liquidity': '', 'volume': '', 'liquidity_value': '', 'LPTokens': '' }, 'farm': { 'pair': _0x5cc905[_0xd9f0c(0x12e)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; if (_0x513d80 == '1') try { const _0x2f817e = await _0x14c345['decimals'](); console[_0xd9f0c(0x131)](_0x2f817e); const _0x1873e0 = await _0x14c345['balanceOf'](_0x22e8ff[_0xd9f0c(0xf6)]), _0x37525f = new ethers[(_0xd9f0c(0xe5))](_0x33e5b9, busdabi, _0x22e8ff), _0x3e76af = new ethers['Contract'](_0x32267e, busdabi, _0x22e8ff), _0xf31a65 = await _0x37525f[_0xd9f0c(0x129)](_0x1b307c), _0xe1cc7e = await _0x3e76af[_0xd9f0c(0x129)](_0x1b307c), _0x1f3ab0 = await _0x37525f[_0xd9f0c(0x129)](_0x22e8ff['address']), _0x584a46 = await _0x3e76af[_0xd9f0c(0x129)](_0x22e8ff['address']); var _0x4c2fde = parseFloat(ethers['utils'][_0xd9f0c(0xf1)](String(_0xf31a65))), _0x202b21 = parseFloat(ethers[_0xd9f0c(0x10c)]['formatEther'](String(_0xe1cc7e))), _0x4026a7 = parseFloat(ethers[_0xd9f0c(0x10c)][_0xd9f0c(0xf1)](String(_0x1f3ab0))), _0x6009c = parseFloat(ethers['utils'][_0xd9f0c(0xf1)](String(_0x584a46))); console['log'](_0xd9f0c(0x118) + String(_0x4026a7) + ',\x20liquidity2_value=' + String(_0x6009c)), console[_0xd9f0c(0x131)](_0xd9f0c(0xed) + String(_0x4c2fde) + ',\x20liquidity2=' + String(_0x202b21)); var _0x158347 = 0x1, _0x94cdeb = 0x1, _0x3e34b6 = 0x0, _0x45734d = 0x0, _0x4c40b8 = 0xe8d4a51000; try { if (UsdtAddr != _0x33e5b9) { _0x158347 = await _0x4f4689[_0xd9f0c(0x13c)](ethers[_0xd9f0c(0x10c)]['parseUnits'](String('1'), _0x2f817e), [UsdtAddr, _0x33e5b9]); var _0x46ac22 = ethers['utils'][_0xd9f0c(0xf1)](String(_0x158347[0x0])); _0x158347 = parseFloat(_0x46ac22) * _0x4c40b8, console[_0xd9f0c(0x131)](_0x158347), _0x3e34b6 = 0x1; } else _0x3e34b6 = 0x1, _0x158347 = 0x1, _0x4026a7 = _0x4026a7 * _0x4c40b8, _0x4c2fde = _0x4c2fde * _0x4c40b8; } catch (_0x4c5ddf) { _0x3e34b6 = 0x0; } try { if (UsdtAddr != _0x32267e) { _0x94cdeb = await _0x4f4689[_0xd9f0c(0x13c)](ethers[_0xd9f0c(0x10c)][_0xd9f0c(0x128)](String('1'), _0x2f817e), [UsdtAddr, _0x32267e]), console[_0xd9f0c(0x131)](ethers['utils']['formatEther'](String(_0x94cdeb[0x0]))); var _0x46ac22 = ethers[_0xd9f0c(0x10c)][_0xd9f0c(0xf1)](String(_0x94cdeb[0x0])); _0x94cdeb = parseFloat(_0x46ac22) * _0x4c40b8, console[_0xd9f0c(0x131)](_0x94cdeb), _0x45734d = 0x1; } else _0x45734d = 0x1, _0x94cdeb = 0x1, _0x6009c = _0x6009c * _0x4c40b8, _0x202b21 = _0x202b21 * _0x4c40b8; } catch (_0x47c6ce) { _0x45734d = 0x0; } _0x3e34b6 == 0x0 && (_0x158347 = 0x0, _0x94cdeb = _0x94cdeb * 0x2); _0x45734d == 0x0 && (_0x94cdeb = 0x0, _0x158347 = _0x158347 * 0x2); var _0x2ed7fb = _0x4c2fde * _0x158347 + _0x202b21 * _0x94cdeb, _0x34bf98 = _0x4026a7 * _0x158347 + _0x6009c * _0x94cdeb; console[_0xd9f0c(0x131)](_0xd9f0c(0x10f) + String(_0x2ed7fb) + _0xd9f0c(0xe7) + String(_0x34bf98)), _0x39ecec['responseData'][_0xd9f0c(0x101)]['liquidity'] = _0x2ed7fb, _0x39ecec[_0xd9f0c(0xfb)][_0xd9f0c(0x101)]['volume'] = '', _0x39ecec[_0xd9f0c(0xfb)][_0xd9f0c(0x101)]['liquidity_value'] = _0x34bf98, _0x39ecec['responseData']['pool'][_0xd9f0c(0x100)] = ethers[_0xd9f0c(0x10c)]['formatEther'](String(_0x1873e0));; } catch (_0x1f2ae6) { console[_0xd9f0c(0x131)](_0x1f2ae6); } if (_0x58ea23 == '1') try { var _0x3f4021 = getpIdFromPairName(_0xbb1992); console[_0xd9f0c(0x131)](_0xd9f0c(0xee) + String(_0x3f4021)); if (_0x3f4021 > -0x1) { const _0x43433a = await _0x46b887[_0xd9f0c(0x10d)](_0x3f4021, _0x22e8ff[_0xd9f0c(0xf6)]); _0x39ecec[_0xd9f0c(0xfb)]['farm'][_0xd9f0c(0x130)] = ethers[_0xd9f0c(0x10c)][_0xd9f0c(0xf1)](String(_0x43433a[_0xd9f0c(0x127)])), _0x39ecec[_0xd9f0c(0xfb)][_0xd9f0c(0xe2)][_0xd9f0c(0x124)] = ethers[_0xd9f0c(0x10c)][_0xd9f0c(0xf1)](String(_0x43433a['rewardDebt'])); } _0x39ecec[_0xd9f0c(0xfb)][_0xd9f0c(0xe2)]['APR'] = '', _0x39ecec['responseData']['farm'][_0xd9f0c(0x12a)] = ''; } catch (_0x3c2eb5) { console[_0xd9f0c(0x131)](_0x3c2eb5); } } catch (_0x3530f1) { _0x39ecec[_0xd9f0c(0x102)] = 0x190, _0x39ecec[_0xd9f0c(0xe9)] = _0x3530f1['reason'], console[_0xd9f0c(0x131)](_0x3530f1); } return _0x39ecec; }, exports['liquidityAdd'] = async _0x31f568 => { const _0x3e47e3 = _0x5bd078; console[_0x3e47e3(0x131)](_0x3e47e3(0x112)); const { platform: _0x45c8e1, pair: _0x124f27, method: _0x2fc0a9, pool: _0xcfb014, farm: _0x5ce6ac, address1: _0x58a860, address2: _0x433fc0, private_key: _0x1d0ace, rpc_url: _0x3bdb35 } = _0x31f568, { addr1: _0x48f987, addr2: _0x1b4810 } = getAddressFromPairName(_0x124f27), _0x340f71 = new ethers[(_0x3e47e3(0xfe))][(_0x3e47e3(0x11e))](_0x3bdb35), _0x161257 = new ethers[(_0x3e47e3(0x10b))](_0x1d0ace, _0x340f71); var _0x1953d8 = _0x48f987, _0x1ccc33 = _0x1b4810; if (_0x1953d8 == '') _0x1953d8 = _0x58a860; if (_0x1ccc33 == '') _0x1ccc33 = _0x433fc0; console['log']('owner\x20address', _0x161257[_0x3e47e3(0xf6)]); let _0x59ffc0 = { 'statusCode': 0xc8, 'requestData': _0x31f568, 'responseData': null }; _0x59ffc0['responseData'] = { 'address1': _0x1953d8, 'address2': _0x1ccc33, 'pool': { 'pair': _0x31f568[_0x3e47e3(0x12e)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x247fad = new ethers[(_0x3e47e3(0xe5))](ExchangeRouterAddr, Routerabi, _0x161257), _0x179b7e = new ethers['Contract'](_0x1953d8, busdabi, _0x161257); tx = await _0x179b7e[_0x3e47e3(0x13b)](_0x247fad[_0x3e47e3(0xf6)], ethers[_0x3e47e3(0x10c)][_0x3e47e3(0x128)](String(parseFloat(amount1) * 0x2), 0x12)), await tx['wait'](), console[_0x3e47e3(0x131)](_0x3e47e3(0xe8)); const _0x1c29ff = new ethers[(_0x3e47e3(0xe5))](_0x1ccc33, busdabi, _0x161257); tx = await _0x1c29ff[_0x3e47e3(0x13b)](_0x247fad['address'], ethers[_0x3e47e3(0x10c)][_0x3e47e3(0x128)](String(parseFloat(amount2) * 0x2), 0x12)), await tx[_0x3e47e3(0xe3)](), console[_0x3e47e3(0x131)](_0x3e47e3(0xff)); var _0x57e913 = 0x12, _0x4b42a9 = 0x12; if (_0x1953d8 == UsdtAddr) _0x57e913 = 0x6; if (_0x1ccc33 == UsdtAddr) _0x4b42a9 = 0x6; tx = await _0x247fad['addLiquidity'](_0x1953d8, _0x1ccc33, ethers['utils'][_0x3e47e3(0x128)](String(amount1), _0x57e913), ethers[_0x3e47e3(0x10c)]['parseUnits'](String(amount2), _0x4b42a9), 0x0, 0x0, _0x161257[_0x3e47e3(0xf6)], _0x3e47e3(0x12c)), await tx[_0x3e47e3(0xe3)](), _0x59ffc0['responseData'][_0x3e47e3(0xe4)] = tx; } catch (_0x5651f0) { _0x59ffc0[_0x3e47e3(0x102)] = 0x190, _0x59ffc0['error_reason'] = _0x5651f0[_0x3e47e3(0xf3)], console[_0x3e47e3(0x131)](_0x5651f0); } return _0x59ffc0; }, exports['liquidityRemove'] = async _0x35af68 => { const _0x1bd228 = _0x5bd078; console[_0x1bd228(0x131)](_0x1bd228(0x132)); const { platform: _0x423537, pair: _0x10ad83, method: _0x337028, pool: _0x39bbbe, farm: _0x200c2d, address1: _0x54befa, address2: _0x1d15f5, private_key: _0x501d66, rpc_url: _0x8b6c63 } = _0x35af68, { addr1: _0x2cb01e, addr2: _0x125925 } = getAddressFromPairName(_0x10ad83), _0x43739c = new ethers[(_0x1bd228(0xfe))][(_0x1bd228(0x11e))](_0x8b6c63), _0x5382d4 = new ethers[(_0x1bd228(0x10b))](_0x501d66, _0x43739c); var _0x1a9d9f = _0x2cb01e, _0x59ae93 = _0x125925; if (_0x1a9d9f == '') _0x1a9d9f = _0x54befa; if (_0x59ae93 == '') _0x59ae93 = _0x1d15f5; console[_0x1bd228(0x131)](_0x1bd228(0x103), _0x5382d4[_0x1bd228(0xf6)]); let _0x3eb1e5 = { 'statusCode': 0xc8, 'requestData': _0x35af68, 'responseData': null }; _0x3eb1e5[_0x1bd228(0xfb)] = { 'address1': _0x1a9d9f, 'address2': _0x59ae93, 'pool': { 'pair': _0x35af68[_0x1bd228(0x12e)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x523a26 = new ethers[(_0x1bd228(0xe5))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x5382d4), _0x122732 = new ethers[(_0x1bd228(0xe5))](ExchangeRouterAddr, Routerabi, _0x5382d4); var _0x5d358a = await _0x523a26[_0x1bd228(0xeb)](_0x1a9d9f, _0x59ae93); const _0x4780f2 = new ethers['Contract'](_0x5d358a, [_0x1bd228(0xf7)], _0x5382d4); tx = await _0x4780f2['approve'](_0x122732[_0x1bd228(0xf6)], ethers['utils'][_0x1bd228(0x128)](String(liquidity), 0x12)), await tx[_0x1bd228(0xe3)](), tx = await _0x122732[_0x1bd228(0x11c)](_0x1a9d9f, _0x59ae93, ethers[_0x1bd228(0x10c)]['parseUnits'](String(liquidity), 0x12), 0x0, 0x0, _0x5382d4[_0x1bd228(0xf6)], _0x1bd228(0x12c)), await tx['wait'](), _0x3eb1e5[_0x1bd228(0xfb)][_0x1bd228(0xe4)] = tx; } catch (_0x4e84ff) { _0x3eb1e5[_0x1bd228(0x102)] = 0x190, _0x3eb1e5['error_reason'] = _0x4e84ff['reason']; } return _0x3eb1e5; }, exports['farmingDeposit'] = async _0x339150 => { const _0x10e5d7 = _0x5bd078; console['log'](_0x10e5d7(0x123)); const { platform: _0x607f12, pair: _0x502de5, method: _0x3bd15f, pool: _0x120179, farm: _0x370dcb, address1: _0x58c60c, address2: _0x341746, private_key: _0x4f4535, rpc_url: _0x19b5cd } = _0x339150, { addr1: _0x5445de, addr2: _0x16a99c } = getAddressFromPairName(_0x502de5), _0x6344e4 = new ethers[(_0x10e5d7(0xfe))][(_0x10e5d7(0x11e))](_0x19b5cd), _0x1466ae = new ethers[(_0x10e5d7(0x10b))](_0x4f4535, _0x6344e4); var _0xacd5b3 = _0x5445de, _0x4dbbf2 = _0x16a99c; if (_0xacd5b3 == '') _0xacd5b3 = _0x58c60c; if (_0x4dbbf2 == '') _0x4dbbf2 = _0x341746; console[_0x10e5d7(0x131)](_0x10e5d7(0x103), _0x1466ae[_0x10e5d7(0xf6)]); let _0x4ed833 = { 'statusCode': 0xc8, 'requestData': _0x339150, 'responseData': null }; _0x4ed833[_0x10e5d7(0xfb)] = { 'address1': _0xacd5b3, 'address2': _0x4dbbf2, 'pool': null, 'farm': { 'pair': _0x339150[_0x10e5d7(0x12e)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x83b5a = new ethers[(_0x10e5d7(0xe5))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x1466ae), _0xfea20d = new ethers['Contract'](masterchefAddr, MasterChefabi, _0x1466ae); var _0x5b512f = await _0x83b5a[_0x10e5d7(0xeb)](_0xacd5b3, _0x4dbbf2); console[_0x10e5d7(0x131)](_0x10e5d7(0x13a), _0x5b512f); var _0x13b368 = getpIdFromPairName(_0x502de5); console[_0x10e5d7(0x131)]('pid:' + String(_0x13b368)); _0x13b368 < 0x0 && (console[_0x10e5d7(0x131)](_0x10e5d7(0x105), _0x5b512f), tx = await _0xfea20d[_0x10e5d7(0x13e)](0x64, _0x5b512f, ![]), await tx[_0x10e5d7(0xe3)](), _0x13b368 = 0x0); const _0x2e8d06 = new ethers[(_0x10e5d7(0xe5))](_0x5b512f, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], _0x1466ae); tx = await _0x2e8d06[_0x10e5d7(0x13b)](_0xfea20d[_0x10e5d7(0xf6)], ethers['utils'][_0x10e5d7(0x128)](String(liquidity), 0x12)), await tx['wait'](), tx = await _0xfea20d[_0x10e5d7(0x109)](String(_0x13b368), ethers['utils']['parseUnits'](String(liquidity), 0x12)), await tx[_0x10e5d7(0xe3)](), _0x4ed833[_0x10e5d7(0xfb)]['result'] = tx; } catch (_0x3dcc0a) { _0x4ed833[_0x10e5d7(0x102)] = 0x190, _0x4ed833[_0x10e5d7(0xe9)] = _0x3dcc0a[_0x10e5d7(0xf3)]; } return _0x4ed833; }, exports['farmingHarvest'] = async _0x4f2ddc => { const _0x483773 = _0x5bd078; console[_0x483773(0x131)](_0x483773(0x108)); const { platform: _0x5f266e, pair: _0x1ba176, method: _0x5ce9c3, pool: _0x573531, farm: _0xda5f9e, address1: _0x15babf, address2: _0x125952, private_key: _0x3b7efa, rpc_url: _0x750acf } = _0x4f2ddc, { addr1: _0xea8b91, addr2: _0x50a204 } = getAddressFromPairName(_0x1ba176), _0x1acf27 = new ethers[(_0x483773(0xfe))]['JsonRpcProvider'](_0x750acf), _0x57045b = new ethers[(_0x483773(0x10b))](_0x3b7efa, _0x1acf27); console[_0x483773(0x131)]('owner\x20address', _0x57045b['address']); let _0x260033 = { 'statusCode': 0xc8, 'requestData': _0x4f2ddc, 'responseData': null }; _0x260033[_0x483773(0xfb)] = { 'pool': null, 'farm': { 'pair': _0x4f2ddc[_0x483773(0x12e)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { var _0x365b8c = getpIdFromPairName(_0x1ba176); console['log']('pid:' + String(_0x365b8c)); const _0x3750e8 = new ethers[(_0x483773(0xe5))](masterchefAddr, MasterChefabi, _0x57045b); tx = await _0x3750e8[_0x483773(0x109)](String(_0x365b8c), 0x0), await tx[_0x483773(0xe3)](), _0x260033[_0x483773(0xfb)][_0x483773(0xe4)] = tx, _0x260033[_0x483773(0xfb)][_0x483773(0x121)] = tx['value']['toNumber'](); } catch (_0x6c0679) { _0x260033['statusCode'] = 0x190, _0x260033[_0x483773(0xe9)] = _0x6c0679[_0x483773(0xf3)]; } return _0x260033; }, exports['farmingWithdraw'] = async _0x3baca8 => { const _0x390048 = _0x5bd078; console[_0x390048(0x131)](_0x390048(0x11a)); const { platform: _0x1ec627, pair: _0x2cb100, method: _0x2c01aa, pool: _0x1f0f89, farm: _0x5cafcf, address1: _0x21353f, address2: _0x4305ae, private_key: _0x545e60, rpc_url: _0x1cf75a } = _0x3baca8, { addr1: _0x1a57f7, addr2: _0x1776be } = getAddressFromPairName(_0x2cb100), _0x489049 = new ethers[(_0x390048(0xfe))][(_0x390048(0x11e))](_0x1cf75a), _0x496acf = new ethers['Wallet'](_0x545e60, _0x489049); var _0x3f8494 = _0x1a57f7, _0x3a608a = _0x1776be; if (_0x3f8494 == '') _0x3f8494 = _0x21353f; if (_0x3a608a == '') _0x3a608a = _0x4305ae; console[_0x390048(0x131)](_0x390048(0x103), _0x496acf[_0x390048(0xf6)]); let _0x1629d1 = { 'statusCode': 0xc8, 'requestData': _0x3baca8, 'responseData': null }; _0x1629d1[_0x390048(0xfb)] = { 'address1': _0x3f8494, 'address2': _0x3a608a, 'pool': null, 'farm': { 'pair': _0x3baca8[_0x390048(0x12e)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x9923d2 = new ethers[(_0x390048(0xe5))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x496acf), _0xbc2cec = new ethers[(_0x390048(0xe5))](masterchefAddr, MasterChefabi, _0x496acf); var _0x49ea17 = await _0x9923d2['getPair'](_0x3f8494, _0x3a608a); console[_0x390048(0x131)]('tokenLp\x20token', _0x49ea17); var _0xa0b71e = getpIdFromPairName(_0x2cb100); console['log'](_0x390048(0xee) + String(_0xa0b71e)), _0xa0b71e < 0x0 && (console[_0x390048(0x131)]('Add\x20', _0x49ea17), tx = await _0xbc2cec['add'](0x64, _0x49ea17, ![]), await tx[_0x390048(0xe3)](), _0xa0b71e = 0x1), tx = await _0xbc2cec[_0x390048(0xe1)](String(_0xa0b71e), ethers[_0x390048(0x10c)][_0x390048(0x128)](String(liquidity), 0x12)), await tx['wait'](), _0x1629d1[_0x390048(0xfb)][_0x390048(0xe4)] = tx; } catch (_0x204852) { _0x1629d1[_0x390048(0x102)] = 0x190, _0x1629d1[_0x390048(0xe9)] = _0x204852[_0x390048(0xf3)]; } return _0x1629d1; }; function _0x5e3a() { const _0x57e6b8 = ['/abi/PcnVault.json', 'address', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', 'USDT-ETH', 'SushiSwapExchangeRouter', '../../core_scripts/config/addresses.json', 'responseData', 'parse', 'SushiSwapUsdc', 'providers', 'approve\x20token2', 'LPTokens', 'pool', 'statusCode', 'owner\x20address', 'SushiSwapSushi', 'Add\x20', 'SushiSwapIlv', '250obOmer', 'calling\x20farmingHarvest', 'deposit', '368046ConkLg', 'Wallet', 'utils', 'userInfo', '4471254KxeNDl', 'liquidity=', 'SushiSwapExchangeFactory', 'formatUnits', 'calling\x20liquidityAdd', 'ETH-SUSHI', 'AAVE-ETH', 'calling\x20statusGet', '10299DMAFYc', 'ETH-ILV', 'liquidity1_value=', 'abi', 'calling\x20farmingWithdraw', 'statusGet', 'removeLiquidity', 'ILV-ETH', 'JsonRpcProvider', '12SDLMkP', '88bCEMpE', 'harvest_value', '379265GAvtqS', 'calling\x20farmingDeposit', 'reward_value', 'lpToken', 'balance0ETH', 'amount', 'parseUnits', 'balanceOf', 'LTV', 'ETH-USDT', '111111111111111111111', '61304qLlhDI', 'pair', 'readFileSync', 'deposit_value', 'log', 'calling\x20liquidityRemove', 'utf-8', 'ETH-USDC', '/abi/MasterChef.json', '/abi/BEP20Token.json', '35BVYxNH', '418830JYahZA', 'getBalance', 'tokenLp\x20token', 'approve', 'getAmountsIn', 'ETH-AAVE', 'add', 'USDC-ETH', 'SushiSwapUsdt', 'withdraw', 'farm', 'wait', 'result', 'Contract', 'SushiSwapAave', ',liquidity_value\x20=', 'approve\x20token1', 'error_reason', 'SUSHI-ETH', 'getPair', '1548892PDvQLU', 'liquidity1=', 'pid:', 'poolLength', 'SushiSwapWETH', 'formatEther', 'SushiSwapmasterchef', 'reason', 'ethers']; _0x5e3a = function () { return _0x57e6b8; }; return _0x5e3a(); }