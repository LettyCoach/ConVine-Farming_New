function _0x4be9(_0xb1ee1b, _0x4a16d5) { const _0x471c75 = _0x471c(); return _0x4be9 = function (_0x4be994, _0x1238cd) { _0x4be994 = _0x4be994 - 0x85; let _0x54c9b7 = _0x471c75[_0x4be994]; return _0x54c9b7; }, _0x4be9(_0xb1ee1b, _0x4a16d5); } const _0x1b15a6 = _0x4be9; (function (_0x152451, _0x45e3af) { const _0x53a077 = _0x4be9, _0x2d61c7 = _0x152451(); while (!![]) { try { const _0x44af9a = -parseInt(_0x53a077(0x88)) / 0x1 * (-parseInt(_0x53a077(0xc4)) / 0x2) + -parseInt(_0x53a077(0xac)) / 0x3 + parseInt(_0x53a077(0xad)) / 0x4 + -parseInt(_0x53a077(0xb9)) / 0x5 + -parseInt(_0x53a077(0xc3)) / 0x6 * (-parseInt(_0x53a077(0xcf)) / 0x7) + parseInt(_0x53a077(0xa6)) / 0x8 * (parseInt(_0x53a077(0xa8)) / 0x9) + -parseInt(_0x53a077(0x98)) / 0xa; if (_0x44af9a === _0x45e3af) break; else _0x2d61c7['push'](_0x2d61c7['shift']()); } catch (_0x5c10c4) { _0x2d61c7['push'](_0x2d61c7['shift']()); } } }(_0x471c, 0x1e76f)); const ethers = require(_0x1b15a6(0xbf)), pcnVaultabi = require(_0x1b15a6(0xab))[_0x1b15a6(0xae)], Routerabi = require(_0x1b15a6(0xd7))[_0x1b15a6(0xae)], ExchangeFactoryabi = require(_0x1b15a6(0xa1))[_0x1b15a6(0xae)], busdabi = require(_0x1b15a6(0xb2))[_0x1b15a6(0xae)], MasterChefabi = require(_0x1b15a6(0xb5))[_0x1b15a6(0xae)], LPPairabi = require(_0x1b15a6(0x8d))['abi'], Addresses = require('../config/addresses.json'), provider = new ethers[(_0x1b15a6(0xb7))]['JsonRpcProvider'](process[_0x1b15a6(0xc2)]['FantomTestUrl']); let private_key = process[_0x1b15a6(0xc2)][_0x1b15a6(0xd0)]; const owner = new ethers[(_0x1b15a6(0x9c))](private_key, provider), ExchangeFactoryAddr = Addresses[_0x1b15a6(0x8c)], ExchangeRouterAddr = Addresses[_0x1b15a6(0x97)], cakeVaultAddr = Addresses[_0x1b15a6(0xc8)], masterchefAddr = Addresses[_0x1b15a6(0xc0)], UsdtAddr = Addresses[_0x1b15a6(0xbc)]; function getpIdFromPairName(_0x4f940d) { const _0x57dd3d = _0x1b15a6; var _0x6c8434 = 0x0; switch (_0x4f940d) { case _0x57dd3d(0xc6): _0x6c8434 = 0x3; break; case _0x57dd3d(0xba): _0x6c8434 = 0x2; break; case 'WETH-CAKE': _0x6c8434 = 0x1; break; default: break; }return _0x6c8434; } function _0x471c() { const _0x7f2570 = ['formatUnits', '30154UIAHTy', 'balance0ETH', 'pool', 'CAKE-BNB', 'ExchangeFactory', '../../artifacts/contracts/exchange-protocol/dexfactory.sol/NeondexPair.json', 'calling\x20statusGet', 'add', 'APR', 'formatEther', 'RACA-BUSD', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', 'removeLiquidity', 'calling\x20liquidityRemove', 'result', 'ExchangeRouter', '1898860rYYbwb', 'tokenLp\x20token', 'approve\x20token2', 'calling\x20liquidityAdd', 'Wallet', 'volume', 'owner\x20address', 'liquidity', 'farm', '../../artifacts/contracts/exchange-protocol/dexfactory.sol/NeondexFactory.json', 'Cake', 'getBalance', 'amount', 'statusCode', '1067272swDPFy', 'Contract', '9kvFyWw', 'getAmountsIn', 'approve', '../../artifacts/contracts/cakevault/pcnVault.sol/pcnVault.json', '252246oYkArM', '713388VxUcDK', 'abi', 'farmingWithdraw', 'pair', 'farmingDeposit', '../../artifacts/contracts/tokens/busd.sol/BEP20Token.json', 'parseUnits', 'userInfo', '../../artifacts/contracts/masterchef/MasterChef.sol/MasterChef.json', 'withdraw', 'providers', 'CAKE-BUSD', '1165745wYAjKc', 'WETH-USDT', 'decimals', 'Usdt', 'address', 'Add\x20', 'ethers', 'masterchef', ',\x20price2=', 'env', '822yYYnLK', '16kDZnbX', 'wait', 'CAKE-USDT', 'pid:', 'cakeVault', 'responseData', 'toNumber', 'deposit_value', 'balanceOf', 'log', 'approve\x20token1', '4032ikpmWm', 'PRIVATEKEY', 'calling\x20farmingHarvest', 'statusGet', 'value', 'harvest_value', 'liquidity1=', 'utils', '../../artifacts/contracts/exchange-protocol/dexRouter.sol/NeondexRouter.json', 'liquidity_value', 'liquidityAdd']; _0x471c = function () { return _0x7f2570; }; return _0x471c(); } function getAddressFromPairName(_0x50a4b0) { const _0x18f1cd = _0x1b15a6; var _0x2690a4 = 0x0, _0x33fd09 = '', _0xe8a644 = ''; switch (_0x50a4b0) { case _0x18f1cd(0xc6): _0x33fd09 = Addresses[_0x18f1cd(0xa2)], _0xe8a644 = Addresses[_0x18f1cd(0xbc)]; break; case _0x18f1cd(0x92): _0x33fd09 = '', _0xe8a644 = ''; break; case _0x18f1cd(0xb8): _0x33fd09 = Addresses[_0x18f1cd(0xa2)], _0xe8a644 = ''; break; case _0x18f1cd(0x8b): _0x33fd09 = Addresses[_0x18f1cd(0xa2)], _0xe8a644 = ''; break; default: break; }return res = { 'addr1': _0x33fd09, 'addr2': _0xe8a644 }, res; } exports[_0x1b15a6(0xd2)] = async _0x13f991 => { const _0x1e9890 = _0x1b15a6; console[_0x1e9890(0xcd)](_0x1e9890(0x8e)); const { platform: _0x534f53, pair: _0x5666b4, method: _0x42e3c6, pool: _0x16df9b, farm: _0xf7f03b, address1: _0x567092, address2: _0x14deff } = _0x13f991, { addr1: _0x53d67d, addr2: _0x5f4351 } = getAddressFromPairName(_0x5666b4); var _0xfd79dd = _0x53d67d, _0x98d681 = _0x5f4351; if (_0xfd79dd == '') _0xfd79dd = _0x567092; if (_0x98d681 == '') _0x98d681 = _0x14deff; let _0x514a6d = { 'statusCode': 0xc8, 'requestData': _0x13f991, 'responseData': null }; try { console[_0x1e9890(0xcd)](_0x1e9890(0x9e), owner[_0x1e9890(0xbd)]); const _0x162d84 = await provider[_0x1e9890(0xa3)](owner[_0x1e9890(0xbd)]), _0x25287a = ethers['utils'][_0x1e9890(0x87)](_0x162d84, 0x12); console[_0x1e9890(0xcd)](_0x1e9890(0x89), _0x25287a); const _0x357f81 = new ethers[(_0x1e9890(0xa7))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0xf129e7 = new ethers[(_0x1e9890(0xa7))](ExchangeRouterAddr, Routerabi, owner), _0x57be37 = new ethers[(_0x1e9890(0xa7))](masterchefAddr, MasterChefabi, owner); var _0x195263 = await _0x357f81['getPair'](_0xfd79dd, _0x98d681); const _0x339c4b = new ethers[(_0x1e9890(0xa7))](_0x195263, LPPairabi, owner); _0x514a6d['responseData'] = { 'wallet_balance': _0x25287a, 'pairAddr': _0x195263, 'address1': _0xfd79dd, 'address2': _0x98d681, 'pool': { 'pair': _0x13f991[_0x1e9890(0xb0)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': { 'pair': _0x13f991[_0x1e9890(0xb0)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; let _0x4dff4e; if (_0x16df9b == '1') try { const _0x4dccae = await _0x339c4b[_0x1e9890(0xbb)](), _0x226247 = await _0x339c4b[_0x1e9890(0xcc)](owner['address']), _0xab2204 = new ethers['Contract'](_0xfd79dd, busdabi, owner), _0x47c072 = new ethers[(_0x1e9890(0xa7))](_0x98d681, busdabi, owner), _0x535b5f = await _0xab2204[_0x1e9890(0xcc)](_0x195263), _0x254596 = await _0x47c072[_0x1e9890(0xcc)](_0x195263); var _0x1ec8ee = parseFloat(ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x535b5f))), _0x368a2c = parseFloat(ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x254596))), _0x32f70b = 0x1, _0x315936 = 0x1, _0x484a29 = 0x0, _0x56ca2d = 0x0; try { if (UsdtAddr != _0xfd79dd) { _0x32f70b = await _0xf129e7['getAmountsIn'](ethers[_0x1e9890(0xd6)]['parseUnits'](String('1'), _0x4dccae), [UsdtAddr, _0xfd79dd]); var _0x7d95c6 = ethers[_0x1e9890(0xd6)]['formatEther'](String(_0x32f70b[0x0])); _0x32f70b = parseFloat(_0x7d95c6), console[_0x1e9890(0xcd)](_0x32f70b), _0x484a29 = 0x1; } } catch (_0x35b5e1) { _0x484a29 = 0x0; } try { if (UsdtAddr != _0x98d681) { _0x315936 = await _0xf129e7[_0x1e9890(0xa9)](ethers['utils'][_0x1e9890(0xb3)](String('1'), _0x4dccae), [UsdtAddr, _0x98d681]), console[_0x1e9890(0xcd)](ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x315936[0x0]))); var _0x7d95c6 = ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x315936[0x0])); _0x315936 = parseFloat(_0x7d95c6), _0x56ca2d = 0x1; } } catch (_0x5efa5f) { _0x56ca2d = 0x0; } _0x484a29 == 0x0 && (_0x32f70b = 0x0, _0x315936 = _0x315936 * 0x2); _0x56ca2d == 0x0 && (_0x315936 = 0x0, _0x32f70b = _0x32f70b * 0x2); console[_0x1e9890(0xcd)](_0x1e9890(0xd5) + String(_0x1ec8ee) + ',\x20liquidity2=' + String(_0x368a2c)), console[_0x1e9890(0xcd)]('price1=' + String(_0x32f70b) + _0x1e9890(0xc1) + String(_0x315936)); var _0x37745f = _0x1ec8ee * _0x32f70b + _0x368a2c * _0x315936; console['log']('liquidity=' + String(_0x37745f)), _0x514a6d[_0x1e9890(0xc9)][_0x1e9890(0x8a)][_0x1e9890(0x9f)] = _0x37745f, _0x514a6d[_0x1e9890(0xc9)]['pool'][_0x1e9890(0x9d)] = '', _0x514a6d['responseData'][_0x1e9890(0x8a)][_0x1e9890(0x85)] = ethers[_0x1e9890(0xd6)]['formatEther'](String(_0x226247)); } catch (_0x519418) { console['log'](_0x519418); } if (_0xf7f03b == '1') try { var _0x533331 = getpIdFromPairName(_0x5666b4); console[_0x1e9890(0xcd)](_0x1e9890(0xc7) + String(_0x533331)); if (_0x533331 > 0x0) { const _0x30db42 = await _0x57be37[_0x1e9890(0xb4)](_0x533331, owner[_0x1e9890(0xbd)]); _0x514a6d[_0x1e9890(0xc9)][_0x1e9890(0xa0)][_0x1e9890(0xcb)] = ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x30db42[_0x1e9890(0xa4)])), _0x514a6d[_0x1e9890(0xc9)][_0x1e9890(0xa0)]['reward_value'] = ethers[_0x1e9890(0xd6)][_0x1e9890(0x91)](String(_0x30db42['rewardDebt'])); } _0x514a6d[_0x1e9890(0xc9)][_0x1e9890(0xa0)][_0x1e9890(0x90)] = '', _0x514a6d[_0x1e9890(0xc9)]['farm']['LTV'] = ''; } catch (_0x33b045) { console[_0x1e9890(0xcd)](_0x33b045); } } catch (_0x36a431) { _0x514a6d[_0x1e9890(0xa5)] = 0x190, console['log'](_0x36a431); } return _0x514a6d; }, exports[_0x1b15a6(0x86)] = async _0x79316e => { const _0x2ddc50 = _0x1b15a6; console['log'](_0x2ddc50(0x9b)); const { platform: _0x50ba5e, pair: _0xf0bafa, method: _0x169e26, pool: _0x2c234c, farm: _0x586237, address1: _0x2bf4f3, address2: _0x172787, amount1: _0x5f220e, amount2: _0x4ef184 } = _0x79316e, { addr1: _0x184dcf, addr2: _0x56402a } = getAddressFromPairName(_0xf0bafa); var _0x42615a = _0x184dcf, _0x4467e3 = _0x56402a; if (_0x42615a == '') _0x42615a = _0x2bf4f3; if (_0x4467e3 == '') _0x4467e3 = _0x172787; console[_0x2ddc50(0xcd)](_0x2ddc50(0x9e), owner['address']); let _0xecfb5 = { 'statusCode': 0xc8, 'requestData': _0x79316e, 'responseData': null }; _0xecfb5[_0x2ddc50(0xc9)] = { 'address1': _0x42615a, 'address2': _0x4467e3, 'pool': { 'pair': _0x79316e[_0x2ddc50(0xb0)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x134397 = new ethers['Contract'](ExchangeRouterAddr, Routerabi, owner), _0x56f34f = new ethers[(_0x2ddc50(0xa7))](_0x42615a, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], owner); tx = await _0x56f34f[_0x2ddc50(0xaa)](_0x134397[_0x2ddc50(0xbd)], ethers[_0x2ddc50(0xd6)]['parseUnits'](String(parseFloat(_0x5f220e) * 0x2), 0x12)), await tx[_0x2ddc50(0xc5)](), console[_0x2ddc50(0xcd)](_0x2ddc50(0xce)); const _0x2d070f = new ethers['Contract'](_0x4467e3, ['function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)'], owner); tx = await _0x2d070f[_0x2ddc50(0xaa)](_0x134397[_0x2ddc50(0xbd)], ethers[_0x2ddc50(0xd6)][_0x2ddc50(0xb3)](String(parseFloat(_0x4ef184) * 0x2), 0x12)), await tx[_0x2ddc50(0xc5)](), console[_0x2ddc50(0xcd)](_0x2ddc50(0x9a)), tx = await _0x134397['addLiquidity'](_0x42615a, _0x4467e3, ethers['utils'][_0x2ddc50(0xb3)](String(_0x5f220e), 0x12), ethers[_0x2ddc50(0xd6)][_0x2ddc50(0xb3)](String(_0x4ef184), 0x12), 0x0, 0x0, owner[_0x2ddc50(0xbd)], '111111111111111111111'), await tx['wait'](), _0xecfb5[_0x2ddc50(0xc9)][_0x2ddc50(0x96)] = tx; } catch (_0x266747) { _0xecfb5[_0x2ddc50(0xa5)] = 0x190, console[_0x2ddc50(0xcd)](_0x266747); } return _0xecfb5; }, exports['liquidityRemove'] = async _0x3c5385 => { const _0x1755cb = _0x1b15a6; console[_0x1755cb(0xcd)](_0x1755cb(0x95)); const { platform: _0x418c42, pair: _0x50be98, method: _0xb790d3, pool: _0x12b76f, farm: _0x2601ac, address1: _0x29d5bf, address2: _0x34df9c, liquidity: _0x459575 } = _0x3c5385, { addr1: _0x3d52c5, addr2: _0x3c664c } = getAddressFromPairName(_0x50be98); var _0x4590bd = _0x3d52c5, _0x17ee4b = _0x3c664c; if (_0x4590bd == '') _0x4590bd = _0x29d5bf; if (_0x17ee4b == '') _0x17ee4b = _0x34df9c; console['log']('owner\x20address', owner[_0x1755cb(0xbd)]); let _0x4b409e = { 'statusCode': 0xc8, 'requestData': _0x3c5385, 'responseData': null }; _0x4b409e[_0x1755cb(0xc9)] = { 'address1': _0x4590bd, 'address2': _0x17ee4b, 'pool': { 'pair': _0x3c5385[_0x1755cb(0xb0)], 'liquidity': '', 'volume': '', 'liquidity_value': '' }, 'farm': null }; try { const _0x22856e = new ethers[(_0x1755cb(0xa7))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x172f73 = new ethers['Contract'](ExchangeRouterAddr, Routerabi, owner); var _0x3e5fb7 = await _0x22856e['getPair'](_0x4590bd, _0x17ee4b); const _0x51a8bc = new ethers['Contract'](_0x3e5fb7, [_0x1755cb(0x93)], owner); tx = await _0x51a8bc[_0x1755cb(0xaa)](_0x172f73[_0x1755cb(0xbd)], ethers['utils'][_0x1755cb(0xb3)](String(_0x459575), 0x12)), await tx[_0x1755cb(0xc5)](), tx = await _0x172f73[_0x1755cb(0x94)](_0x4590bd, _0x17ee4b, ethers['utils'][_0x1755cb(0xb3)](String(_0x459575), 0x12), 0x0, 0x0, owner['address'], '111111111111111111111'), await tx[_0x1755cb(0xc5)](), _0x4b409e[_0x1755cb(0xc9)]['result'] = tx; } catch (_0x5d4fa0) { _0x4b409e[_0x1755cb(0xa5)] = 0x190, console['log'](_0x5d4fa0); } return _0x4b409e; }, exports[_0x1b15a6(0xb1)] = async _0x583323 => { const _0x233903 = _0x1b15a6; console[_0x233903(0xcd)]('calling\x20farmingDeposit'); const { platform: _0x4319c9, pair: _0x1cd084, method: _0x2d94f2, pool: _0x371037, farm: _0x1b6b6e, address1: _0x3c96b5, address2: _0x8fd493, liquidity: _0x576eab } = _0x583323, { addr1: _0x52014c, addr2: _0x2d26d9 } = getAddressFromPairName(_0x1cd084); var _0x2b873d = _0x52014c, _0x19f9d2 = _0x2d26d9; if (_0x2b873d == '') _0x2b873d = _0x3c96b5; if (_0x19f9d2 == '') _0x19f9d2 = _0x8fd493; console[_0x233903(0xcd)](_0x233903(0x9e), owner[_0x233903(0xbd)]); let _0x23186f = { 'statusCode': 0xc8, 'requestData': _0x583323, 'responseData': null }; _0x23186f[_0x233903(0xc9)] = { 'address1': _0x2b873d, 'address2': _0x19f9d2, 'pool': null, 'farm': { 'pair': _0x583323['pair'], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x43371c = new ethers[(_0x233903(0xa7))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0x299c94 = new ethers[(_0x233903(0xa7))](masterchefAddr, MasterChefabi, owner); var _0x2ceedb = await _0x43371c['getPair'](_0x2b873d, _0x19f9d2); console[_0x233903(0xcd)](_0x233903(0x99), _0x2ceedb); var _0x1caeb = getpIdFromPairName(_0x1cd084); console[_0x233903(0xcd)]('pid:' + String(_0x1caeb)); _0x1caeb < 0x1 && (console['log']('Add\x20', _0x2ceedb), tx = await _0x299c94['add'](0x64, _0x2ceedb, ![]), await tx[_0x233903(0xc5)](), _0x1caeb = 0x1); const _0x7c5bb8 = new ethers[(_0x233903(0xa7))](_0x2ceedb, [_0x233903(0x93)], owner); tx = await _0x7c5bb8['approve'](_0x299c94['address'], ethers[_0x233903(0xd6)]['parseUnits'](String(_0x576eab), 0x12)), await tx[_0x233903(0xc5)](), tx = await _0x299c94['deposit'](String(_0x1caeb), ethers[_0x233903(0xd6)][_0x233903(0xb3)](String(_0x576eab), 0x12)), await tx[_0x233903(0xc5)](), _0x23186f[_0x233903(0xc9)][_0x233903(0x96)] = tx; } catch (_0x312fee) { _0x23186f['statusCode'] = 0x190, console[_0x233903(0xcd)](_0x312fee); } return _0x23186f; }, exports['farmingHarvest'] = async _0x32e810 => { const _0x5d54c8 = _0x1b15a6; console[_0x5d54c8(0xcd)](_0x5d54c8(0xd1)); const { platform: _0x49c4fa, pair: _0x521733, method: _0x98a864, pool: _0xe8d77, farm: _0x337036 } = _0x32e810; console[_0x5d54c8(0xcd)](_0x5d54c8(0x9e), owner['address']); let _0x4b9acc = { 'statusCode': 0xc8, 'requestData': _0x32e810, 'responseData': null }; _0x4b9acc[_0x5d54c8(0xc9)] = { 'pool': null, 'farm': { 'pair': _0x32e810['pair'], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { pcnVault = new ethers['Contract'](cakeVaultAddr, pcnVaultabi, owner), tx = await pcnVault['harvest'](), await tx[_0x5d54c8(0xc5)](), _0x4b9acc[_0x5d54c8(0xc9)][_0x5d54c8(0x96)] = tx, _0x4b9acc[_0x5d54c8(0xc9)][_0x5d54c8(0xd4)] = tx[_0x5d54c8(0xd3)][_0x5d54c8(0xca)](); } catch (_0x26a99b) { _0x4b9acc[_0x5d54c8(0xa5)] = 0x190, console[_0x5d54c8(0xcd)](_0x26a99b); } return _0x4b9acc; }, exports[_0x1b15a6(0xaf)] = async _0x5c0cae => { const _0x561c1c = _0x1b15a6; console[_0x561c1c(0xcd)]('calling\x20farmingWithdraw'); const { platform: _0xb02a65, pair: _0x3aa1b9, method: _0x38544f, pool: _0x2eee3f, farm: _0x568534, address1: _0x331f64, address2: _0x641429, liquidity: _0xbefaf9 } = _0x5c0cae, { addr1: _0x4e1cea, addr2: _0x505ca3 } = getAddressFromPairName(_0x3aa1b9); var _0x5873a0 = _0x4e1cea, _0x229a58 = _0x505ca3; if (_0x5873a0 == '') _0x5873a0 = _0x331f64; if (_0x229a58 == '') _0x229a58 = _0x641429; console[_0x561c1c(0xcd)](_0x561c1c(0x9e), owner[_0x561c1c(0xbd)]); let _0x567173 = { 'statusCode': 0xc8, 'requestData': _0x5c0cae, 'responseData': null }; _0x567173[_0x561c1c(0xc9)] = { 'address1': _0x5873a0, 'address2': _0x229a58, 'pool': null, 'farm': { 'pair': _0x5c0cae[_0x561c1c(0xb0)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; try { const _0x403eae = new ethers[(_0x561c1c(0xa7))](ExchangeFactoryAddr, ExchangeFactoryabi, owner), _0xaaf8ba = new ethers[(_0x561c1c(0xa7))](masterchefAddr, MasterChefabi, owner); var _0x5b917c = await _0x403eae['getPair'](_0x5873a0, _0x229a58); console['log'](_0x561c1c(0x99), _0x5b917c); var _0x5e8ee7 = getpIdFromPairName(_0x3aa1b9); console[_0x561c1c(0xcd)]('pid:' + String(_0x5e8ee7)), _0x5e8ee7 < 0x1 && (console[_0x561c1c(0xcd)](_0x561c1c(0xbe), _0x5b917c), tx = await _0xaaf8ba[_0x561c1c(0x8f)](0x64, _0x5b917c, ![]), await tx[_0x561c1c(0xc5)](), _0x5e8ee7 = 0x1), tx = await _0xaaf8ba[_0x561c1c(0xb6)](String(_0x5e8ee7), ethers[_0x561c1c(0xd6)][_0x561c1c(0xb3)](String(_0xbefaf9), 0x12)), await tx['wait'](), _0x567173[_0x561c1c(0xc9)][_0x561c1c(0x96)] = tx; } catch (_0x28ee05) { _0x567173[_0x561c1c(0xa5)] = 0x190, console[_0x561c1c(0xcd)](_0x28ee05); } return _0x567173; };