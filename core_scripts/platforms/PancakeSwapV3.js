const _0xd9b075 = _0x1cb7; (function (_0x176a31, _0x2a02f4) { const _0x286967 = _0x1cb7, _0x2b895b = _0x176a31(); while (!![]) { try { const _0x380b00 = -parseInt(_0x286967(0x1f6)) / 0x1 * (parseInt(_0x286967(0x1db)) / 0x2) + parseInt(_0x286967(0x1e8)) / 0x3 + -parseInt(_0x286967(0x1fd)) / 0x4 * (-parseInt(_0x286967(0x241)) / 0x5) + parseInt(_0x286967(0x1e9)) / 0x6 * (parseInt(_0x286967(0x23b)) / 0x7) + parseInt(_0x286967(0x20a)) / 0x8 + parseInt(_0x286967(0x1f4)) / 0x9 * (-parseInt(_0x286967(0x237)) / 0xa) + -parseInt(_0x286967(0x22e)) / 0xb; if (_0x380b00 === _0x2a02f4) break; else _0x2b895b['push'](_0x2b895b['shift']()); } catch (_0x33eb0c) { _0x2b895b['push'](_0x2b895b['shift']()); } } }(_0x2192, 0xb1a1d)); const ethers = require('ethers'); var fs = require('fs'); const Addresses = require(_0xd9b075(0x1d6)); var data = fs[_0xd9b075(0x1d5)](__dirname + _0xd9b075(0x1f7), _0xd9b075(0x23d)); const pcnVaultabi = JSON['parse'](data)['abi']; data = fs[_0xd9b075(0x1d5)](__dirname + '/abi/PancakeswapRouterV3.json', _0xd9b075(0x23d)); const Routerabi = JSON[_0xd9b075(0x238)](data); data = fs[_0xd9b075(0x1d5)](__dirname + '/abi/PancakeswapFactoryV3.json', _0xd9b075(0x23d)); const ExchangeFactoryabi = JSON[_0xd9b075(0x238)](data); function _0x2192() { const _0x4adfef = ['tx[pid]', 'farm', 'Contract', 'safeTransferFrom', 'calling\x20farmingDeposit', '8220YPOSTS', 'parse', 'liquidity_value', 'liquidity1_value=', '2429QrCPYi', 'withdraw', 'utf-8', 'mint', 'function\x20approve(address\x20spender,\x20uint256\x20amount)\x20public\x20returns\x20(bool)', 'deposit_value', '348195aZrZht', 'harvest', 'logs', 'token0', 'approve\x20token1', 'calling\x20liquidityAdd\x20V3', 'token1', 'readFileSync', '../../core_scripts/config/addresses.json', 'farmingWithdraw', 'collect', 'amount1', 'statusCode', '10AoGsTV', 'result', 'event\x20IncreaseLiquidity(uint256\x20indexed\x20tokenId,\x20uint128\x20liquidity,\x20uint256\x20amount0,\x20uint256\x20amount1)', 'liquidityRemove', 'statusGet', 'parseUnits', 'volume', 'There\x20is\x20LP\x20Token\x20that\x20already\x20deposited', 'PancakeSwapmasterchefV3', 'LPTokens', 'There\x20is\x20no\x20LP\x20Token\x20for\x20Withdraw', 'balance0ETH', 'v3PoolAddressPid', '3558537kCxOPr', '9066KqgHpS', 'owner\x20address', 'liquidity=', 'Interface', 'log', 'providers', 'error_reason', 'toNumber', ',\x20liquidity2=', 'liquidityAdd', 'address', '4293QSupax', 'calling\x20farmingWithdraw', '37711scpQsw', '/abi/PcnVault.json', ',\x20price2=', 'JsonRpcProvider', 'tick\x20lower', 'positions', ',liquidity_value\x20=', '20OVhyfe', 'responseData', '111111111111111111111', 'formatUnits', 'LTV', 'wait', ',\x20liquidity2_value=', 'approve\x20token2', 'push', 'topic', 'getEventTopic', 'reward', 'forEach', '8581160ZJxddV', 'pid', 'liquidity1=', 'pid:', 'amount0', 'approve', 'getAmountsIn', 'tickUpper', './utils/utils', 'reward_value', '/abi/NeondexRouter.json', 'pool', 'Fee', 'poolInfo', 'topics', '/abi/PancakeswapMasterchefV3.json', 'Wallet', 'DecreaseLiquidity', 'PancakeSwapUsdt', 'feeAmountTickSpacing', 'index\x20:\x20tokenId', 'tokenOfOwnerByIndex', 'price1=', 'balanceOf', 'PancakeSwapcakeVault', 'liquidity', 'parseLog', 'formatEther', 'APR', 'args', 'pair', 'getBalance', 'toUpperCase', 'utils', 'tokenId', 'farmingHarvest', '20054166SRYCxq', 'event\x20DecreaseLiquidity(uint256\x20indexed\x20tokenId,\x20uint128\x20liquidity,\x20uint256\x20amount0,\x20uint256\x20amount1)', 'calling\x20liquidityRemove', 'reason']; _0x2192 = function () { return _0x4adfef; }; return _0x2192(); } data = fs[_0xd9b075(0x1d5)](__dirname + '/abi/BEP20Token.json', _0xd9b075(0x23d)); const busdabi = JSON[_0xd9b075(0x238)](data)['abi']; data = fs[_0xd9b075(0x1d5)](__dirname + _0xd9b075(0x219), _0xd9b075(0x23d)); const MasterChefabi = JSON[_0xd9b075(0x238)](data); data = fs[_0xd9b075(0x1d5)](__dirname + '/abi/PancakeswapPoolPairToken.json', _0xd9b075(0x23d)); const LPPairabi = JSON[_0xd9b075(0x238)](data); data = fs[_0xd9b075(0x1d5)](__dirname + _0xd9b075(0x214), 'utf-8'); const V2Routerabi = JSON[_0xd9b075(0x238)](data)['abi'], fee_decimal = 0x4, { PancakeswapGetFeeFromPairName, readLPInformation, writeLPInformation, PancakeswapGetpIdFromPairName, PancakeswapGetAddressFromPairName } = require('./utils/getAddressFn'), { getMinTick, getMaxTick } = require(_0xd9b075(0x212)), ExchangeFactoryAddr = Addresses['PancakeSwapExchangeFactoryV3'], ExchangeRouterAddr = Addresses['PancakeSwapExchangeRouterV3'], ExchangeRouterAddrV2 = Addresses['PancakeSwapExchangeRouter'], cakeVaultAddr = Addresses[_0xd9b075(0x222)], masterchefAddr = Addresses[_0xd9b075(0x1e3)], UsdtAddr = Addresses[_0xd9b075(0x21c)]; async function findPid(_0x58e3a9, _0x37ca8c, _0x21d29b) { const _0x3f7456 = _0xd9b075; console[_0x3f7456(0x1ed)]('tokenLp\x20token', _0x21d29b); var _0x405bab = 0x0; try { while (0x1) { _0x405bab++; const _0x40142c = await _0x37ca8c[_0x3f7456(0x217)](String(_0x405bab)); _0x40142c['lpToken'] == _0x21d29b && console[_0x3f7456(0x1ed)](_0x3f7456(0x20d) + String(_0x405bab)); } } catch (_0x2cda31) { } } exports[_0xd9b075(0x1df)] = async _0x7fd949 => { const _0x3931e6 = _0xd9b075; console[_0x3931e6(0x1ed)]('calling\x20statusGet'); const { platform: _0x25de2e, pair: _0x3fb245, method: _0x114e63, pool: _0x405d18, farm: _0x43d7ca, address1: _0x4b8845, address2: _0x28e5d5, private_key: _0x20f88b, rpc_url: _0x57ee56 } = _0x7fd949, { addr1: _0x556f92, addr2: _0x234d03 } = PancakeswapGetAddressFromPairName(_0x3fb245), _0x3087ad = new ethers[(_0x3931e6(0x1ee))][(_0x3931e6(0x1f9))](_0x57ee56), _0x38b85b = new ethers['Wallet'](_0x20f88b, _0x3087ad); var _0x4f209c = _0x556f92, _0x42a869 = _0x234d03; if (_0x4f209c == '') _0x4f209c = _0x4b8845; if (_0x42a869 == '') _0x42a869 = _0x28e5d5; let _0x1d9cb8 = { 'statusCode': 0xc8, 'requestData': _0x7fd949, 'responseData': null }; try { console[_0x3931e6(0x1ed)](_0x3931e6(0x1ea), _0x38b85b[_0x3931e6(0x1f3)]); const _0x2f399a = await _0x3087ad[_0x3931e6(0x229)](_0x38b85b['address']), _0x10399a = ethers[_0x3931e6(0x22b)][_0x3931e6(0x200)](_0x2f399a, 0x12); console[_0x3931e6(0x1ed)](_0x3931e6(0x1e6), _0x10399a); const _0x284eb8 = new ethers[(_0x3931e6(0x234))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x38b85b), _0xd6b651 = new ethers[(_0x3931e6(0x234))](ExchangeRouterAddrV2, V2Routerabi, _0x38b85b); var _0x1cea8d = PancakeswapGetFeeFromPairName(_0x3fb245), _0x359993 = await _0x284eb8['getPool'](_0x4f209c, _0x42a869, ethers[_0x3931e6(0x22b)]['parseUnits'](String(_0x1cea8d), fee_decimal)); console[_0x3931e6(0x1ed)]('LP\x20address', _0x359993); const _0x1b2dce = new ethers['Contract'](_0x359993, LPPairabi, _0x38b85b); var _0x4a9ed4 = _0x25de2e + '_' + _0x3fb245; let _0x46de7b = await readLPInformation(_0x4a9ed4); _0x1d9cb8[_0x3931e6(0x1fe)] = { 'wallet_balance': _0x10399a, 'pairAddr': _0x359993, 'address1': _0x4f209c, 'address2': _0x42a869, 'pool': { 'pair': _0x7fd949[_0x3931e6(0x228)], 'liquidity': '', 'volume': '', 'liquidity_value': '', 'LPTokens': '' }, 'farm': { 'pair': _0x7fd949[_0x3931e6(0x228)], 'APR': '', 'LTV': '', 'deposit_value': '', 'reward_value': '' } }; var _0x59f20e = [], _0x44c15d = [], _0x17bf35 = []; if (_0x405d18 == '1') { var _0x261617 = 0x0; while (0x1) { var _0x363bab = await TokenOfOwnerByIndex(_0x38b85b, _0x261617); console[_0x3931e6(0x1ed)](_0x3931e6(0x21e), _0x261617, _0x363bab); if (_0x363bab < 0x0) break; try { tx = await PositionInformationOfTokenId(_0x38b85b, _0x363bab); if ((tx[_0x3931e6(0x1d1)][_0x3931e6(0x22a)]() == _0x4f209c[_0x3931e6(0x22a)]() && tx[_0x3931e6(0x1d4)][_0x3931e6(0x22a)]() == _0x42a869[_0x3931e6(0x22a)]()) | (tx[_0x3931e6(0x1d1)][_0x3931e6(0x22a)]() == _0x42a869[_0x3931e6(0x22a)]() && tx[_0x3931e6(0x1d4)][_0x3931e6(0x22a)]() == _0x4f209c[_0x3931e6(0x22a)]())) { LP_Token = ethers['utils'][_0x3931e6(0x225)](String(tx['liquidity'])); let _0x429593 = { 'tokenId': _0x363bab, 'liquidity': LP_Token }; _0x59f20e[_0x3931e6(0x205)](_0x429593); } } catch (_0x3e3931) { } _0x261617++; } try { const _0x5efea6 = 0x12, _0x5dd4a3 = new ethers[(_0x3931e6(0x234))](_0x4f209c, busdabi, _0x38b85b), _0x234c13 = new ethers[(_0x3931e6(0x234))](_0x42a869, busdabi, _0x38b85b), _0x2515f5 = await _0x5dd4a3[_0x3931e6(0x221)](_0x359993), _0x314cde = await _0x234c13[_0x3931e6(0x221)](_0x359993), _0x582753 = await _0x5dd4a3[_0x3931e6(0x221)](_0x38b85b[_0x3931e6(0x1f3)]), _0x2ee029 = await _0x234c13[_0x3931e6(0x221)](_0x38b85b['address']); var _0x1e6f50 = parseFloat(ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(_0x2515f5))), _0x458707 = parseFloat(ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(_0x314cde))), _0x8af89b = parseFloat(ethers['utils']['formatEther'](String(_0x582753))), _0x52486b = parseFloat(ethers['utils'][_0x3931e6(0x225)](String(_0x2ee029))); console[_0x3931e6(0x1ed)](_0x3931e6(0x23a) + String(_0x8af89b) + _0x3931e6(0x203) + String(_0x52486b)), console['log'](_0x3931e6(0x20c) + String(_0x1e6f50) + _0x3931e6(0x1f1) + String(_0x458707)); var _0x272059 = 0x1, _0x58eda4 = 0x1, _0x32c0fe = 0x0, _0x43cd99 = 0x0, _0x36692b = 0x1; try { if (UsdtAddr != _0x4f209c) { _0x272059 = await _0xd6b651[_0x3931e6(0x210)](ethers[_0x3931e6(0x22b)][_0x3931e6(0x1e0)](String('1'), _0x5efea6), [UsdtAddr, _0x4f209c]); var _0x365448 = ethers[_0x3931e6(0x22b)]['formatEther'](String(_0x272059[0x0])); _0x272059 = parseFloat(_0x365448) * _0x36692b, console[_0x3931e6(0x1ed)](_0x272059), _0x32c0fe = 0x1; } else _0x32c0fe = 0x1, _0x272059 = 0x1, _0x8af89b = _0x8af89b * _0x36692b, _0x1e6f50 = _0x1e6f50 * _0x36692b; } catch (_0x3d8d8a) { _0x32c0fe = 0x0; } try { if (UsdtAddr != _0x42a869) { _0x58eda4 = await _0xd6b651[_0x3931e6(0x210)](ethers['utils'][_0x3931e6(0x1e0)](String('1'), _0x5efea6), [UsdtAddr, _0x42a869]), console[_0x3931e6(0x1ed)](ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(_0x58eda4[0x0]))); var _0x365448 = ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(_0x58eda4[0x0])); _0x58eda4 = parseFloat(_0x365448) * _0x36692b, console[_0x3931e6(0x1ed)](_0x58eda4), _0x43cd99 = 0x1; } else _0x43cd99 = 0x1, _0x58eda4 = 0x1, _0x52486b = _0x52486b * _0x36692b, _0x458707 = _0x458707 * _0x36692b; } catch (_0x226c04) { _0x43cd99 = 0x0; } _0x32c0fe == 0x0 && (_0x272059 = 0x0, _0x58eda4 = _0x58eda4 * 0x2); _0x43cd99 == 0x0 && (_0x58eda4 = 0x0, _0x272059 = _0x272059 * 0x2); console[_0x3931e6(0x1ed)](_0x3931e6(0x220) + String(_0x272059) + _0x3931e6(0x1f8) + String(_0x58eda4)); var _0x2c136c = _0x1e6f50 * _0x272059 + _0x458707 * _0x58eda4, _0x53cd58 = _0x8af89b * _0x272059 + _0x52486b * _0x58eda4; console[_0x3931e6(0x1ed)](_0x3931e6(0x1eb) + String(_0x2c136c) + _0x3931e6(0x1fc) + String(_0x53cd58)), _0x1d9cb8[_0x3931e6(0x1fe)]['pool'][_0x3931e6(0x223)] = _0x2c136c, _0x1d9cb8['responseData'][_0x3931e6(0x215)][_0x3931e6(0x1e1)] = '', _0x1d9cb8['responseData'][_0x3931e6(0x215)][_0x3931e6(0x239)] = _0x53cd58, _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x215)][_0x3931e6(0x1e4)] = _0x59f20e, _0x46de7b['liquidity'] = _0x1d9cb8[_0x3931e6(0x1fe)]['pool'][_0x3931e6(0x223)], _0x46de7b[_0x3931e6(0x1e1)] = _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x215)]['volume'], _0x46de7b['liquidity_value'] = _0x1d9cb8['responseData']['pool'][_0x3931e6(0x239)]; } catch (_0x3dbaa1) { console[_0x3931e6(0x1ed)](_0x3dbaa1); } } if (_0x43d7ca == '1') try { const _0x434d2a = new ethers[(_0x3931e6(0x234))](masterchefAddr, MasterChefabi, _0x38b85b); var _0x261617 = 0x0, _0x374d18 = await _0x434d2a[_0x3931e6(0x1e7)](_0x359993); _0x374d18 = _0x374d18[_0x3931e6(0x1f0)](), console[_0x3931e6(0x1ed)]('pid', _0x374d18); while (0x1) { var _0x363bab = await TokenOfOwnerByIndexFarm(_0x38b85b, _0x261617); _0x261617++, console[_0x3931e6(0x1ed)](_0x3931e6(0x21e), _0x261617, _0x363bab); if (_0x363bab < 0x0) break; try { tx = await UserInformationOfTokenId(_0x38b85b, _0x363bab), tx[_0x3931e6(0x20b)] = tx['pid'][_0x3931e6(0x1f0)](), console[_0x3931e6(0x1ed)](_0x3931e6(0x232), tx[_0x3931e6(0x20b)]); if (_0x374d18 != tx[_0x3931e6(0x20b)]) continue; deposit_value = ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(tx[_0x3931e6(0x223)])), reward_value = ethers[_0x3931e6(0x22b)][_0x3931e6(0x225)](String(tx[_0x3931e6(0x208)])); let _0x46929c = { 'tokenId': _0x363bab, 'deposit_value': deposit_value }, _0x19b5ce = { 'tokenId': _0x363bab, 'reward_value': reward_value }; _0x44c15d[_0x3931e6(0x205)](_0x46929c), _0x17bf35[_0x3931e6(0x205)](_0x19b5ce); } catch (_0x16efa2) { console[_0x3931e6(0x1ed)](_0x16efa2); } } _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x233)][_0x3931e6(0x240)] = _0x44c15d, _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x233)][_0x3931e6(0x213)] = _0x17bf35, _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x233)]['APR'] = '', _0x1d9cb8['responseData'][_0x3931e6(0x233)]['LTV'] = '', _0x46de7b[_0x3931e6(0x226)] = _0x1d9cb8[_0x3931e6(0x1fe)][_0x3931e6(0x233)]['APR'], _0x46de7b[_0x3931e6(0x201)] = _0x1d9cb8[_0x3931e6(0x1fe)]['farm'][_0x3931e6(0x201)]; } catch (_0x596bee) { console[_0x3931e6(0x1ed)](_0x596bee); } } catch (_0x113ed1) { _0x1d9cb8['statusCode'] = 0x190, console['log'](_0x113ed1); } return _0x1d9cb8; }, exports[_0xd9b075(0x1f2)] = async _0x2ecdb9 => { const _0x42cbea = _0xd9b075; console[_0x42cbea(0x1ed)](_0x42cbea(0x1d3)); const { platform: _0xdd281, pair: _0x13fb74, method: _0xc00e7c, pool: _0x19e8c6, farm: _0x492719, address1: _0x2d1a26, address2: _0x33815b, amount1: _0x3ec636, amount2: _0x52bb3c, tokenId: _0xa6bab3, private_key: _0x3d776e, rpc_url: _0x524c2a } = _0x2ecdb9, _0xf854e4 = new ethers['providers']['JsonRpcProvider'](_0x524c2a), _0x1f392f = new ethers['Wallet'](_0x3d776e, _0xf854e4); try { if (parseInt(_0xa6bab3) > 0x0) { let _0x2ff7f7 = await increaseLiquidity(_0xf854e4, _0x1f392f, _0x2ecdb9); return _0x2ff7f7; } } catch (_0x1aba56) { console[_0x42cbea(0x1ed)](_0x1aba56); } const { addr1: _0x18121f, addr2: _0x462d91 } = PancakeswapGetAddressFromPairName(_0x13fb74); var _0x370daa = _0x18121f, _0x1e191e = _0x462d91; if (_0x370daa == '') _0x370daa = _0x2d1a26; if (_0x1e191e == '') _0x1e191e = _0x33815b; console[_0x42cbea(0x1ed)](_0x42cbea(0x1ea), _0x1f392f[_0x42cbea(0x1f3)]); let _0x512e19 = { 'statusCode': 0xc8, 'requestData': _0x2ecdb9, 'responseData': null }; var _0xcea147 = _0xdd281 + '_' + _0x13fb74; let _0x1e97fc = await readLPInformation(_0xcea147); _0x512e19[_0x42cbea(0x1fe)] = { 'address1': _0x370daa, 'address2': _0x1e191e, 'pool': { 'pair': _0x2ecdb9['pair'], 'liquidity': _0x1e97fc[_0x42cbea(0x223)], 'volume': _0x1e97fc['volume'], 'liquidity_value': _0x1e97fc['liquidity_value'] }, 'farm': null }; try { var _0x1e0bf8 = PancakeswapGetFeeFromPairName(_0x13fb74); console[_0x42cbea(0x1ed)](_0x42cbea(0x216), _0x1e0bf8); const _0x411a2f = new ethers[(_0x42cbea(0x234))](ExchangeFactoryAddr, ExchangeFactoryabi, _0x1f392f), _0xa9f6a0 = new ethers['Contract'](ExchangeRouterAddr, Routerabi, _0x1f392f); var _0x2ef974 = await _0x411a2f[_0x42cbea(0x21d)](ethers[_0x42cbea(0x22b)][_0x42cbea(0x1e0)](String(_0x1e0bf8), fee_decimal)); console['log'](_0x2ef974), tickSpacing = parseFloat(_0x2ef974); const _0x532f7f = getMinTick(_0x2ef974) + tickSpacing, _0x2d637d = getMaxTick(_0x2ef974) - tickSpacing; console['log'](_0x42cbea(0x1fa), _0x532f7f), console[_0x42cbea(0x1ed)](_0x42cbea(0x211), _0x2d637d); const _0x1285f7 = new ethers[(_0x42cbea(0x234))](_0x370daa, [_0x42cbea(0x23f)], _0x1f392f); tx = await _0x1285f7['approve'](_0xa9f6a0[_0x42cbea(0x1f3)], ethers['utils'][_0x42cbea(0x1e0)](String(parseFloat(_0x3ec636) * 0x2), 0x12)), await tx[_0x42cbea(0x202)](), console[_0x42cbea(0x1ed)]('approve\x20token1'); const _0x498131 = new ethers[(_0x42cbea(0x234))](_0x1e191e, [_0x42cbea(0x23f)], _0x1f392f); tx = await _0x498131[_0x42cbea(0x20f)](_0xa9f6a0[_0x42cbea(0x1f3)], ethers[_0x42cbea(0x22b)][_0x42cbea(0x1e0)](String(parseFloat(_0x52bb3c) * 0x2), 0x12)), await tx[_0x42cbea(0x202)](), console['log'](_0x42cbea(0x204)); var _0x327c54 = 0x12, _0x45e2f4 = 0x12, _0x2de066 = { 'token0': _0x370daa, 'token1': _0x1e191e, 'fee': ethers[_0x42cbea(0x22b)][_0x42cbea(0x1e0)](String(_0x1e0bf8), fee_decimal), 'tickLower': _0x532f7f, 'tickUpper': _0x2d637d, 'amount0Desired': ethers['utils'][_0x42cbea(0x1e0)](String(_0x3ec636), _0x327c54), 'amount1Desired': ethers['utils']['parseUnits'](String(_0x52bb3c), _0x45e2f4), 'amount0Min': 0x0, 'amount1Min': 0x0, 'recipient': _0x1f392f['address'], 'deadline': _0x42cbea(0x1ff) }; tx = await _0xa9f6a0[_0x42cbea(0x23e)](_0x2de066), response = await tx[_0x42cbea(0x202)](); let _0x3edff0 = new ethers[(_0x42cbea(0x22b))][(_0x42cbea(0x1ec))](['event\x20IncreaseLiquidity(uint256\x20indexed\x20tokenId,\x20uint128\x20liquidity,\x20uint256\x20amount0,\x20uint256\x20amount1)']), _0x26d65b = _0x3edff0[_0x42cbea(0x207)]('IncreaseLiquidity'); console[_0x42cbea(0x1ed)](_0x42cbea(0x206), _0x26d65b); let _0x509cc3 = {}; response[_0x42cbea(0x1d0)]['forEach'](_0xb49cfd => { const _0x1a5cab = _0x42cbea; console['log'](_0xb49cfd[_0x1a5cab(0x218)][0x0]), _0xb49cfd[_0x1a5cab(0x218)][0x0] == _0x26d65b && (_0x509cc3 = _0x3edff0['parseLog'](_0xb49cfd)[_0x1a5cab(0x227)], console[_0x1a5cab(0x1ed)](_0x1a5cab(0x1ed), _0x509cc3)); }), _0x512e19[_0x42cbea(0x1fe)][_0x42cbea(0x1dc)] = { 'tokenId': _0x509cc3[_0x42cbea(0x22c)][_0x42cbea(0x1f0)](), 'liquidity': ethers[_0x42cbea(0x22b)]['formatEther'](String(_0x509cc3[_0x42cbea(0x223)])), 'amount0': ethers[_0x42cbea(0x22b)]['formatEther'](String(_0x509cc3['amount0'])), 'amount1': ethers[_0x42cbea(0x22b)]['formatEther'](String(_0x509cc3[_0x42cbea(0x1d9)])) }; } catch (_0x242c47) { _0x512e19[_0x42cbea(0x1da)] = 0x190, _0x512e19[_0x42cbea(0x1ef)] = _0x242c47[_0x42cbea(0x231)], console[_0x42cbea(0x1ed)](_0x242c47); } return _0x512e19; }, exports[_0xd9b075(0x1de)] = async _0xe09d90 => { const _0xbb14a1 = _0xd9b075; console[_0xbb14a1(0x1ed)](_0xbb14a1(0x230)); const { platform: _0x3f4dc2, pair: _0x3eb488, method: _0x3c5d73, pool: _0x45f624, farm: _0x2154f6, address1: _0x1eda83, address2: _0x5b7337, tokenId: _0x5d3180, private_key: _0x8a5fe7, rpc_url: _0xfb5557 } = _0xe09d90, { addr1: _0x1db2c1, addr2: _0x2a0fdb } = PancakeswapGetAddressFromPairName(_0x3eb488), _0x20c841 = new ethers[(_0xbb14a1(0x1ee))][(_0xbb14a1(0x1f9))](_0xfb5557), _0x4f7283 = new ethers[(_0xbb14a1(0x21a))](_0x8a5fe7, _0x20c841); var _0x272d17 = _0x1db2c1, _0x2ea271 = _0x2a0fdb; if (_0x272d17 == '') _0x272d17 = _0x1eda83; if (_0x2ea271 == '') _0x2ea271 = _0x5b7337; console[_0xbb14a1(0x1ed)]('owner\x20address', _0x4f7283[_0xbb14a1(0x1f3)]); let _0x580c56 = { 'statusCode': 0xc8, 'requestData': _0xe09d90, 'responseData': null }; var _0xc932d = _0x3f4dc2 + '_' + _0x3eb488; let _0xdb1e82 = await readLPInformation(_0xc932d); _0x580c56['responseData'] = { 'address1': _0x272d17, 'address2': _0x2ea271, 'pool': { 'pair': _0xe09d90[_0xbb14a1(0x228)], 'liquidity': _0xdb1e82[_0xbb14a1(0x223)], 'volume': _0xdb1e82[_0xbb14a1(0x1e1)], 'liquidity_value': _0xdb1e82[_0xbb14a1(0x239)] }, 'farm': null }; try { const _0x4904e7 = new ethers[(_0xbb14a1(0x234))](ExchangeRouterAddr, Routerabi, _0x4f7283); let _0x10d7b2 = await PositionInformationOfTokenId(_0x4f7283, _0x5d3180); LP_Token = ethers[_0xbb14a1(0x22b)]['formatEther'](String(_0x10d7b2[_0xbb14a1(0x223)])); var _0x1b75b6 = { 'tokenId': _0x5d3180, 'liquidity': _0x10d7b2[_0xbb14a1(0x223)], 'amount0Min': 0x0, 'amount1Min': 0x0, 'deadline': _0xbb14a1(0x1ff) }; _0x10d7b2 = await _0x4904e7['decreaseLiquidity'](_0x1b75b6), response = await _0x10d7b2[_0xbb14a1(0x202)](); let _0x1b97c3 = new ethers[(_0xbb14a1(0x22b))][(_0xbb14a1(0x1ec))]([_0xbb14a1(0x22f)]), _0x434b82 = _0x1b97c3[_0xbb14a1(0x207)](_0xbb14a1(0x21b)); console['log']('topic', _0x434b82); let _0xe02dbd = {}; response[_0xbb14a1(0x1d0)][_0xbb14a1(0x209)](_0x5e84d4 => { const _0x2d6897 = _0xbb14a1; console[_0x2d6897(0x1ed)](_0x5e84d4[_0x2d6897(0x218)][0x0]), _0x5e84d4[_0x2d6897(0x218)][0x0] == _0x434b82 && (_0xe02dbd = _0x1b97c3[_0x2d6897(0x224)](_0x5e84d4)[_0x2d6897(0x227)], console['log']('log', _0xe02dbd)); }), _0x580c56[_0xbb14a1(0x1fe)]['result'] = { 'tokenId': _0xe02dbd[_0xbb14a1(0x22c)][_0xbb14a1(0x1f0)](), 'liquidity': ethers[_0xbb14a1(0x22b)][_0xbb14a1(0x225)](String(_0xe02dbd[_0xbb14a1(0x223)])), 'amount0': ethers['utils'][_0xbb14a1(0x225)](String(_0xe02dbd['amount0'])), 'amount1': ethers[_0xbb14a1(0x22b)][_0xbb14a1(0x225)](String(_0xe02dbd['amount1'])) }, _0x1b75b6 = { 'tokenId': _0x5d3180, 'recipient': _0x4f7283['address'], 'amount0Max': ethers['utils'][_0xbb14a1(0x1e0)](String('340282366920938463463'), 0x12), 'amount1Max': ethers[_0xbb14a1(0x22b)][_0xbb14a1(0x1e0)](String('340282366920938463463'), 0x12) }, _0x10d7b2 = await _0x4904e7[_0xbb14a1(0x1d8)](_0x1b75b6), response = await _0x10d7b2[_0xbb14a1(0x202)](); } catch (_0x3b1535) { _0x580c56['statusCode'] = 0x190, _0x580c56[_0xbb14a1(0x1ef)] = _0x3b1535[_0xbb14a1(0x231)]; } return _0x580c56; }, exports['farmingDeposit'] = async _0x15bebc => { const _0xa825b5 = _0xd9b075; console[_0xa825b5(0x1ed)](_0xa825b5(0x236)); const { platform: _0x2f5e4a, pair: _0x3fe30a, method: _0xe7224a, pool: _0x37660e, farm: _0x5d0a11, address1: _0x4b797f, address2: _0x57db72, tokenId: _0x4c2f88, liquidity: _0x237529, private_key: _0x10913c, rpc_url: _0xda000a } = _0x15bebc, { addr1: _0x4b46a6, addr2: _0x41c485 } = PancakeswapGetAddressFromPairName(_0x3fe30a), _0x26e388 = new ethers[(_0xa825b5(0x1ee))][(_0xa825b5(0x1f9))](_0xda000a), _0x24c974 = new ethers['Wallet'](_0x10913c, _0x26e388); var _0xe59237 = _0x4b46a6, _0x5995e3 = _0x41c485; if (_0xe59237 == '') _0xe59237 = _0x4b797f; if (_0x5995e3 == '') _0x5995e3 = _0x57db72; console[_0xa825b5(0x1ed)](_0xa825b5(0x1ea), _0x24c974[_0xa825b5(0x1f3)]); let _0x4f1a7d = { 'statusCode': 0xc8, 'requestData': _0x15bebc, 'responseData': null }; var _0x3ed62b = _0x2f5e4a + '_' + _0x3fe30a; let _0x595397 = await readLPInformation(_0x3ed62b); _0x4f1a7d[_0xa825b5(0x1fe)] = { 'address1': _0xe59237, 'address2': _0x5995e3, 'pool': null, 'farm': { 'pair': _0x15bebc[_0xa825b5(0x228)], 'APR': _0x595397[_0xa825b5(0x226)], 'LTV': _0x595397[_0xa825b5(0x201)], 'deposit_value': _0x595397[_0xa825b5(0x240)], 'reward_value': _0x595397[_0xa825b5(0x213)] } }; try { tx = await PositionInformationOfTokenId(_0x24c974, _0x4c2f88), LP_Token = ethers[_0xa825b5(0x22b)][_0xa825b5(0x225)](String(tx[_0xa825b5(0x223)])); if (parseFloat(LP_Token) > 0x0) { tx = await UserInformationOfTokenId(_0x24c974, _0x4c2f88), LP_Token = ethers['utils'][_0xa825b5(0x225)](String(tx[_0xa825b5(0x223)])); if (parseFloat(LP_Token) > 0x0) _0x4f1a7d['statusCode'] = 0x190, _0x4f1a7d[_0xa825b5(0x1ef)] = _0xa825b5(0x1e2); else { const _0x4a3c36 = new ethers[(_0xa825b5(0x234))](ExchangeRouterAddr, Routerabi, _0x24c974); tx = await _0x4a3c36[_0xa825b5(0x235)](_0x24c974['address'], masterchefAddr, _0x4c2f88), await tx[_0xa825b5(0x202)](), tx = await UserInformationOfTokenId(_0x24c974, _0x4c2f88), LP_Token = ethers[_0xa825b5(0x22b)][_0xa825b5(0x225)](String(tx['liquidity'])), _0x4f1a7d[_0xa825b5(0x1fe)][_0xa825b5(0x233)][_0xa825b5(0x240)] = LP_Token; } } else _0x4f1a7d[_0xa825b5(0x1da)] = 0x190, _0x4f1a7d[_0xa825b5(0x1ef)] = 'There\x20is\x20no\x20LP\x20Token\x20for\x20Deposit'; } catch (_0x29f424) { _0x4f1a7d[_0xa825b5(0x1da)] = 0x190, _0x4f1a7d[_0xa825b5(0x1ef)] = _0x29f424[_0xa825b5(0x231)]; } return _0x4f1a7d; }, exports[_0xd9b075(0x22d)] = async _0x38c62b => { const _0x35317e = _0xd9b075; console[_0x35317e(0x1ed)]('calling\x20farmingHarvest'); const { platform: _0xd35bff, pair: _0x228f2d, method: _0x100c15, pool: _0x480c0b, farm: _0x49618c, address1: _0x1b0608, address2: _0x4ffb5b, tokenId: _0x1cf8fb, private_key: _0x5356e2, rpc_url: _0xcc39d3 } = _0x38c62b, { addr1: _0x5a6d36, addr2: _0x2f5462 } = PancakeswapGetAddressFromPairName(_0x228f2d), _0x507f57 = new ethers[(_0x35317e(0x1ee))][(_0x35317e(0x1f9))](_0xcc39d3), _0x3d5683 = new ethers['Wallet'](_0x5356e2, _0x507f57); console[_0x35317e(0x1ed)]('owner\x20address', _0x3d5683[_0x35317e(0x1f3)]); let _0x5515f4 = { 'statusCode': 0xc8, 'requestData': _0x38c62b, 'responseData': null }; var _0x7db1a = _0xd35bff + '_' + _0x228f2d; let _0x3cc9fc = await readLPInformation(_0x7db1a); _0x5515f4['responseData'] = { 'pool': null, 'farm': { 'pair': _0x38c62b['pair'], 'APR': _0x3cc9fc[_0x35317e(0x226)], 'LTV': _0x3cc9fc[_0x35317e(0x201)], 'deposit_value': _0x3cc9fc['deposit_value'], 'reward_value': _0x3cc9fc[_0x35317e(0x213)] } }; try { tx = await UserInformationOfTokenId(_0x3d5683, _0x1cf8fb), LP_Token = ethers['utils'][_0x35317e(0x225)](String(tx[_0x35317e(0x223)])); if (parseFloat(LP_Token) > 0x0) { const _0x53247d = new ethers['Contract'](masterchefAddr, MasterChefabi, _0x3d5683); tx = await _0x53247d[_0x35317e(0x1cf)](_0x1cf8fb, _0x3d5683[_0x35317e(0x1f3)]), await tx[_0x35317e(0x202)](), tx = await UserInformationOfTokenId(_0x3d5683, _0x1cf8fb), LP_Token = ethers[_0x35317e(0x22b)][_0x35317e(0x225)](String(tx['liquidity'])); let _0x1fb774 = ethers[_0x35317e(0x22b)][_0x35317e(0x225)](String(tx[_0x35317e(0x208)])); _0x5515f4['responseData'][_0x35317e(0x233)][_0x35317e(0x240)] = LP_Token, _0x5515f4[_0x35317e(0x1fe)][_0x35317e(0x233)][_0x35317e(0x213)] = _0x1fb774; } else _0x5515f4[_0x35317e(0x1da)] = 0x190, _0x5515f4[_0x35317e(0x1ef)] = 'There\x20is\x20no\x20LP\x20Token\x20for\x20Harvest'; } catch (_0x39a919) { _0x5515f4['statusCode'] = 0x190, _0x5515f4[_0x35317e(0x1ef)] = _0x39a919[_0x35317e(0x231)]; } return _0x5515f4; }, exports[_0xd9b075(0x1d7)] = async _0x488fdf => { const _0x28b9b1 = _0xd9b075; console[_0x28b9b1(0x1ed)](_0x28b9b1(0x1f5)); const { platform: _0x35b804, pair: _0x525cec, method: _0x56dc30, pool: _0x4463dc, farm: _0x57e412, address1: _0x46d0a7, address2: _0x40d4c3, tokenId: _0x13e2ad, liquidity: _0x3d5c27, private_key: _0x53a3d4, rpc_url: _0x4b2a10 } = _0x488fdf, { addr1: _0x2146e8, addr2: _0x3415d5 } = PancakeswapGetAddressFromPairName(_0x525cec), _0x22dfea = new ethers[(_0x28b9b1(0x1ee))]['JsonRpcProvider'](_0x4b2a10), _0x35351c = new ethers['Wallet'](_0x53a3d4, _0x22dfea); var _0x18316e = _0x2146e8, _0x1c81ee = _0x3415d5; if (_0x18316e == '') _0x18316e = _0x46d0a7; if (_0x1c81ee == '') _0x1c81ee = _0x40d4c3; console['log']('owner\x20address', _0x35351c[_0x28b9b1(0x1f3)]); let _0x286aed = { 'statusCode': 0xc8, 'requestData': _0x488fdf, 'responseData': null }; var _0x348bc8 = _0x35b804 + '_' + _0x525cec; let _0x42825a = await readLPInformation(_0x348bc8); _0x286aed[_0x28b9b1(0x1fe)] = { 'address1': _0x18316e, 'address2': _0x1c81ee, 'pool': null, 'farm': { 'pair': _0x488fdf[_0x28b9b1(0x228)], 'APR': _0x42825a['APR'], 'LTV': _0x42825a['LTV'], 'deposit_value': _0x42825a[_0x28b9b1(0x240)], 'reward_value': _0x42825a[_0x28b9b1(0x213)] } }; try { tx = await UserInformationOfTokenId(_0x35351c, _0x13e2ad), LP_Token = ethers[_0x28b9b1(0x22b)][_0x28b9b1(0x225)](String(tx[_0x28b9b1(0x223)])); if (parseFloat(LP_Token) > 0x0) { const _0x395e35 = new ethers[(_0x28b9b1(0x234))](masterchefAddr, MasterChefabi, _0x35351c); tx = await _0x395e35[_0x28b9b1(0x23c)](_0x13e2ad, _0x35351c[_0x28b9b1(0x1f3)]), await tx['wait'](), _0x286aed['responseData'][_0x28b9b1(0x233)]['deposit_value'] = 0x0, _0x286aed[_0x28b9b1(0x1fe)][_0x28b9b1(0x233)]['reward_value'] = 0x0; } else _0x286aed[_0x28b9b1(0x1da)] = 0x190, _0x286aed[_0x28b9b1(0x1ef)] = _0x28b9b1(0x1e5); } catch (_0xffbaa5) { _0x286aed[_0x28b9b1(0x1da)] = 0x190, _0x286aed[_0x28b9b1(0x1ef)] = _0xffbaa5[_0x28b9b1(0x231)], console[_0x28b9b1(0x1ed)](_0xffbaa5); } return _0x286aed; }; async function TokenOfOwnerByIndex(_0x8805c2, _0x3258c6) { const _0x1df0e7 = _0xd9b075, _0x1042bf = new ethers['Contract'](ExchangeRouterAddr, Routerabi, _0x8805c2); var _0xe08599 = -0x1; try { tx = await _0x1042bf[_0x1df0e7(0x21f)](_0x8805c2['address'], _0x3258c6), _0xe08599 = tx[_0x1df0e7(0x1f0)](); } catch (_0x518e60) { } return _0xe08599; } async function TokenOfOwnerByIndexFarm(_0x188260, _0x210acb) { const _0xf8ca9e = _0xd9b075, _0x365763 = new ethers[(_0xf8ca9e(0x234))](masterchefAddr, MasterChefabi, _0x188260); var _0x3c7c23 = -0x1; try { tx = await _0x365763[_0xf8ca9e(0x21f)](_0x188260['address'], _0x210acb), _0x3c7c23 = tx[_0xf8ca9e(0x1f0)](); } catch (_0x320719) { } return _0x3c7c23; } async function PositionInformationOfTokenId(_0x54de24, _0x28427d) { const _0xb0836e = _0xd9b075, _0x404a8c = new ethers[(_0xb0836e(0x234))](ExchangeRouterAddr, Routerabi, _0x54de24); var _0x101788 = { 'nonce': 0x0, 'operator': 0x0, 'token0': 0x0, 'token1': 0x0, 'fee': 0x0, 'tickLower': 0x0, 'tickUpper': 0x0, 'liquidity': 0x0, 'feeGrowthInside0LastX128': 0x0, 'feeGrowthInside1LastX128': 0x0, 'tokensOwed0': 0x0, 'tokensOwed1': 0x0 }; try { _0x101788 = await _0x404a8c[_0xb0836e(0x1fb)](_0x28427d); } catch (_0x2dfca4) { } return _0x101788; } async function UserInformationOfTokenId(_0x15f7df, _0x4b19e9) { const _0x57b354 = _0xd9b075, _0x357898 = new ethers[(_0x57b354(0x234))](masterchefAddr, MasterChefabi, _0x15f7df); var _0x283e14 = { 'liquidity': 0x0, 'boostLiquidity': 0x0, 'tickLower': 0x0, 'tickUpper': 0x0, 'rewardGrowthInside': 0x0, 'reward': 0x0, 'user': 0x0, 'pid': 0x0 }; try { _0x283e14 = await _0x357898['userPositionInfos'](_0x4b19e9); } catch (_0x181c3d) { console[_0x57b354(0x1ed)](_0x181c3d); } return _0x283e14; } function _0x1cb7(_0x7fd41, _0x436b9f) { const _0x219223 = _0x2192(); return _0x1cb7 = function (_0x1cb7cd, _0x593718) { _0x1cb7cd = _0x1cb7cd - 0x1cf; let _0x35efa1 = _0x219223[_0x1cb7cd]; return _0x35efa1; }, _0x1cb7(_0x7fd41, _0x436b9f); } async function increaseLiquidity(_0x182301, _0xea0233, _0x400d1c) { const _0xb0439d = _0xd9b075, { platform: _0x515f46, pair: _0x1dc4b3, method: _0x2c0be4, pool: _0x271162, farm: _0x4bf6ca, address1: _0x526bbd, address2: _0x1a721e, amount1: _0x2f6882, amount2: _0x205f74, tokenId: _0xabc02, private_key: _0x964c3f, rpc_url: _0x3548a9 } = _0x400d1c, _0x4f050a = new ethers[(_0xb0439d(0x234))](ExchangeRouterAddr, Routerabi, _0xea0233), { addr1: _0xde938c, addr2: _0x447d7b } = PancakeswapGetAddressFromPairName(_0x1dc4b3); var _0x2408a0 = _0xde938c, _0x2ecca9 = _0x447d7b; if (_0x2408a0 == '') _0x2408a0 = _0x526bbd; if (_0x2ecca9 == '') _0x2ecca9 = _0x1a721e; let _0x447b70 = { 'statusCode': 0xc8, 'requestData': _0x400d1c, 'responseData': null }; var _0x5cb075 = _0x515f46 + '_' + _0x1dc4b3; let _0x4630fb = await readLPInformation(_0x5cb075); _0x447b70[_0xb0439d(0x1fe)] = { 'address1': _0x2408a0, 'address2': _0x2ecca9, 'pool': { 'pair': _0x400d1c[_0xb0439d(0x228)], 'liquidity': _0x4630fb['liquidity'], 'volume': _0x4630fb[_0xb0439d(0x1e1)], 'liquidity_value': _0x4630fb[_0xb0439d(0x239)] }, 'farm': null }; try { const _0x5b0c53 = new ethers['Contract'](_0x2408a0, [_0xb0439d(0x23f)], _0xea0233); tx = await _0x5b0c53[_0xb0439d(0x20f)](_0x4f050a['address'], ethers[_0xb0439d(0x22b)][_0xb0439d(0x1e0)](String(parseFloat(_0x2f6882) * 0x2), 0x12)), await tx[_0xb0439d(0x202)](), console[_0xb0439d(0x1ed)](_0xb0439d(0x1d2)); const _0x45d473 = new ethers[(_0xb0439d(0x234))](_0x2ecca9, [_0xb0439d(0x23f)], _0xea0233); tx = await _0x45d473[_0xb0439d(0x20f)](_0x4f050a[_0xb0439d(0x1f3)], ethers[_0xb0439d(0x22b)]['parseUnits'](String(parseFloat(_0x205f74) * 0x2), 0x12)), await tx[_0xb0439d(0x202)](), console[_0xb0439d(0x1ed)](_0xb0439d(0x204)); var _0x4d36f0 = 0x12, _0x59c00c = 0x12, _0x8c5c02 = { 'tokenId': _0xabc02, 'amount0Desired': ethers['utils']['parseUnits'](String(_0x2f6882), _0x4d36f0), 'amount1Desired': ethers['utils'][_0xb0439d(0x1e0)](String(_0x205f74), _0x59c00c), 'amount0Min': 0x0, 'amount1Min': 0x0, 'deadline': '111111111111111111111' }; tx = await _0x4f050a['increaseLiquidity'](_0x8c5c02); let _0x20e5e6 = await tx[_0xb0439d(0x202)](), _0x185263 = new ethers[(_0xb0439d(0x22b))]['Interface']([_0xb0439d(0x1dd)]), _0x4a7080 = _0x185263[_0xb0439d(0x207)]('IncreaseLiquidity'); console[_0xb0439d(0x1ed)](_0xb0439d(0x206), _0x4a7080); let _0x12b0c0 = {}; _0x20e5e6[_0xb0439d(0x1d0)][_0xb0439d(0x209)](_0x5518ac => { const _0x2826bd = _0xb0439d; console[_0x2826bd(0x1ed)](_0x5518ac[_0x2826bd(0x218)][0x0]), _0x5518ac[_0x2826bd(0x218)][0x0] == _0x4a7080 && (_0x12b0c0 = _0x185263[_0x2826bd(0x224)](_0x5518ac)[_0x2826bd(0x227)], console[_0x2826bd(0x1ed)](_0x2826bd(0x1ed), _0x12b0c0)); }), _0x447b70['responseData'][_0xb0439d(0x1dc)] = { 'tokenId': _0x12b0c0['tokenId'][_0xb0439d(0x1f0)](), 'liquidity': ethers['utils'][_0xb0439d(0x225)](String(_0x12b0c0['liquidity'])), 'amount0': ethers[_0xb0439d(0x22b)][_0xb0439d(0x225)](String(_0x12b0c0[_0xb0439d(0x20e)])), 'amount1': ethers['utils'][_0xb0439d(0x225)](String(_0x12b0c0[_0xb0439d(0x1d9)])) }; } catch (_0x19a001) { _0x447b70['statusCode'] = 0x190, _0x447b70[_0xb0439d(0x1ef)] = _0x19a001[_0xb0439d(0x231)], console[_0xb0439d(0x1ed)](_0x19a001); } return _0x447b70; }